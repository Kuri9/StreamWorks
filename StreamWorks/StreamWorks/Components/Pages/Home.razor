@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using StreamWorks.Api.Twitch.Connections
@using StreamWorks.Api.Twitch.Controllers.User
@using StreamWorks.Api.Twitch.Models.User
@using System.Net.Http.Headers
@using StreamWorks.Helpers.Twitch
@using TwitchLib.Api
@using TwitchLib.Api.Helix.Models.Users.GetUsers

@* Fires OnInitilaize 2x and secondtime doesnt get user from HttpContext *@
@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthProvider
@inject UserManager<StreamWorksUserModel> UserManager
@inject SignInManager<StreamWorksUserModel> SignInManager
@inject NavigationManager NavManager
@inject IdentityUserAccessor UserAccessor
@inject IStreamWorksUserData userData
@inject IConfiguration config
@inject IHttpClientFactory clientFactory
@inject TwitchAPI twitchApi;
@inject ITwitchSignInHelpers twitchSignInHelpers
@inject TwitchUserController twitchInternalApi  
@* @implements IAsyncDisposable *@

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.


<AuthorizeView Policy="Admin">

    <h2>Twitch Connection Data</h2>
    <Button class="btn btn-dark" @onclick="SetupTwitchUser">Setup Twitch User</Button>

    @if (twitchUserData is not null && twitchUserData.Count() > 0)
    {
        <h3>@twitchUserData.First().DisplayName</h3>
        <p>@twitchUserData.First().BroadcasterType</p>
        <p>@twitchUserData.First().Description</p>
    }

</AuthorizeView>

@code {
    private StreamWorksUserModel loggedInUser = default!;
    private ClaimsPrincipal? loggedInUserAuthState;
    private List<GetUserDataModel>? twitchUserData = new();
    private GetUsersResponse? getUserResponse;

    private int tryCount = 3;
    private bool isRefreshingToken = false;
    private string ClientId = "";
    private string AccessToken = "";

    private HubConnection? twitchHub;
    TwitchConnectionModel twitchConnectionData = new();
    IList<Claim> claims = new List<Claim>();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        twitchHub = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/twitchhub"))
            .WithAutomaticReconnect()
            .Build();

        await twitchHub.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupTwitchUser();
        }
    }

    public async Task SetupTwitchUser()
    {
        if (loggedInUser is null)
        {
            if (AuthProvider is not null)
            {
                var authState = await AuthProvider.GetAuthenticationStateAsync();
                loggedInUserAuthState = authState.User;

                foreach (var identity in loggedInUserAuthState.Identities)
                {
                    identity.Claims.ToList().ForEach(c => Console.WriteLine(c.Value));
                }

                loggedInUser = await AuthProvider.GetUserFromAuth(userData);
            }
        }

        SetTwitchConnectionData();
        var name = "enocinoco";
        AccessToken = loggedInUser?.Tokens.Where(t => t.Name == "access_token").First().Value;
        ClientId = twitchConnectionData.ClientId;

        // Call API as a test
        var completed = await GetTwitchUserData(name, AccessToken);

        if (completed)
        {
            // Setup EventSub with data after testing
            Console.WriteLine("Setting up EventSub");
            await twitchHub.SendAsync("SetupConnectionRequest", AccessToken);
        }
    }

    private void SetTwitchConnectionData()
    {
        var refreshToken = loggedInUser?.GetToken("TwitchLogin", "refresh_token").Value;

        if (refreshToken is not null)
        {
            twitchConnectionData.ClientId = config["Twitch:ClientId"];
            Console.WriteLine($"Client ID: {twitchConnectionData.ClientId}");

            twitchConnectionData.ClientSecret = config["Twitch:ClientSecret"];
            Console.WriteLine($"Client Secret: {twitchConnectionData.ClientSecret}");

            twitchConnectionData.RedirectUri = NavManager.Uri.ToString();
            Console.WriteLine($"Redirect URI: {twitchConnectionData.RedirectUri}");

            twitchConnectionData.Scopes = [];

            twitchConnectionData.RefreshToken = refreshToken;
            Console.WriteLine($"Refresh Token: {twitchConnectionData.RefreshToken}");
        };
    }

    private async Task RefreshTwitchToken()
    {
        var refreshedToken = await twitchApi.Auth.RefreshAuthTokenAsync(twitchConnectionData.RefreshToken,
                twitchApi.Settings.Secret = twitchConnectionData.ClientSecret);

        if (refreshedToken is not null)
        {
            try
            {
                var expiresAt = DateTimeOffset.Now.AddSeconds(refreshedToken.ExpiresIn).ToString();

                await UserManager.SetAuthenticationTokenAsync(loggedInUser, "TwitchLogin", "access_token", refreshedToken.AccessToken);
                await UserManager.SetAuthenticationTokenAsync(loggedInUser, "TwitchLogin", "refresh_token", refreshedToken.RefreshToken);
                await UserManager.SetAuthenticationTokenAsync(loggedInUser, "TwitchLogin", "expires_at", expiresAt);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to update user tokens: {ex.Message}");
            }
        }
    }

    private async Task<bool> GetTwitchUserData(string name, string accessToken)
    {
        while (tryCount > 0)
        {
            tryCount--;
            getUserResponse = await twitchInternalApi.GetTwitchUserData(name, accessToken);
            await Task.Delay(1000);

            if (getUserResponse is not null)
            {
                if (getUserResponse.Users.Count() > 0)
                {
                    foreach (var user in getUserResponse.Users)
                    {
                        var userData = new GetUserDataModel();

                        userData.DisplayName = user.DisplayName;
                        userData.BroadcasterType = user.BroadcasterType;
                        userData.Description = user.Description;

                        twitchUserData?.Add(userData);
                    }
                    Console.WriteLine($"User Data: {twitchUserData?.First().DisplayName}");
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("Result didn't contain any Users");
                }

                tryCount = 3;
                return true;
            }
            else
            {
                isRefreshingToken = true;
                Console.WriteLine("Failed to get User Data. Refreshing token!");
            }

            if (isRefreshingToken)
            {
                await twitchSignInHelpers.RefreshTwitchToken(loggedInUser, twitchConnectionData.RefreshToken);
                isRefreshingToken = false;
            }
        }

        return false;
    }

    
}