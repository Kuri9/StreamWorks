@page "/"

@rendermode InteractiveServer

@inject AuthenticationStateProvider authProvider
@inject IStreamWorksUserData userData
@inject UserManager<StreamWorksUserModel> UserManager
@inject IdentityUserAccessor UserAccessor

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.


<AuthorizeView Policy="Admin">
    @if (loggedInUser is not null)
    {
        <h4>@loggedInUser.Id</h4>
        <h3>@loggedInUser.UserName</h3>

       <ul>
            @foreach (var logins in loggedInUser.Logins)
            {
                <li>
                    <ul>
                        <li>
                            <h4>@logins.LoginProvider</h4>
                        </li>
                        <li>
                            @logins.ProviderKey
                        </li>
                        <li>
                            @logins.ProviderDisplayName
                        </li>
                    </ul>
                </li>
            }
        </ul>

        <ul>
            @if (loggedInUserAuthState is not null) {
                @foreach (var claim in loggedInUserAuthState?.User.Claims)
                {
                    <li>
                        @claim.Issuer / @claim.Value / @claim.Type
                    </li>
                }
            }
        </ul>

        <ul>
            @foreach (var role in loggedInUser.Roles)
            {
                <li>
                    @role
                </li>
            }
        </ul>
    } 
    </AuthorizeView>

@code {
    AuthenticationState? loggedInUserAuthState;
    StreamWorksUserModel? loggedInUser;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // if (HttpContext is not null)
        // {
        //     loggedInUser = await UserAccessor.GetRequiredUserAsync(HttpContext);
        // }
        loggedInUserAuthState = await authProvider.GetAuthenticationStateAsync();
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }


}