@page "/"
@using StreamWorks.Core.App
@using StreamWorks.Helpers.Twitch

@using StreamWorks.Library.Models.Users.UserData
@using TwitchLib.Api.Helix.Models.Users.GetUsers
@using TwitchLib.EventSub.Core.SubscriptionTypes.Channel

@* Fires OnInitilaize 2x and second time doesnt get user from HttpContext *@
@rendermode InteractiveServer

@inject ILogger<Home> Logger
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<StreamWorksUserModel> UserManager
@inject NavigationManager NavManager
@inject IStreamWorksUserData userData
@inject IConfiguration config
@inject IHttpClientFactory clientFactory
@inject TwitchAPI twitchApi;
@inject ITwitchSignInHelpers twitchSignInHelpers
@inject IAppStateCore appState
@inject IUserAppState userAppState

@implements IAsyncDisposable

<PageTitle>Welcome to StreamWorks Live!</PageTitle>

<div class="row">
    <div class="col-10">
        <div class="row">
            <div class="col-2">
                <AuthorizeView>
                    @if (twitchUserData is not null && twitchUserData.Count > 0)
                    {
                        <img class="img-fluid profile-image" src="@twitchUserData.First().ProfileImageUrl" />
                        <div class="mb-3">
                            <p>Click here to Revoke Twitch Token</p>
                            <Button class="btn btn-sm btn-dark" @onclick="RevokeTwitchToken">Revoke Twitch Token</Button>
                        </div>
                    }
                </AuthorizeView>
            </div>
            <div class="col-9">
                <div class="row mb-3">
                @if (loggedInUser is not null && loggedInUser.DisplayName?.Length > 0)
                {
                    <h1>Hello, @loggedInUser.DisplayName!</h1>
                }
                else
                {
                    <h1>Hello, world!</h1>

                    <p>Be sure to log in so you can use our various stream reources!</p>
                }

                </div>
                <AuthorizeView>
                    <div class="row mb-3">
                        <h3>Your Twitch Connection Data</h3>
                    <div/>
                    <div class="row">
                        <div class="col">
                            @if (twitchUserData is not null && twitchUserData.Count() > 0)
                            {
                                <h4>@twitchUserData.First().DisplayName</h4>
                                <h5>Twitch ID: @twitchUserData.First().Id</h5>
                                
                                <div>
                                <p>Broadcaster Type: @twitchUserData.First().BroadcasterType</p>
                                <p>@twitchUserData.First().Description</p>
                                </div>
                            }
                        </div>
                    </div>

                    @if (eventSubSubscriptions is not null)
                    {
                        <div class="row mb-3">
                            <div class="col">
                                <h2>Subscription Info</h2>
                                <h4>@eventSubSubscriptions.TotalCost Points out of @eventSubSubscriptions.MaxTotalCost Points Used</h4>
                                <h3>Current Subscriptions</h3>
                                @foreach (var subscription in eventSubSubscriptions.Subscriptions)
                                {
                                    subscriptions.Add(subscription);
                                }
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col">
                                <h3>Chat Messages</h3>
                                @if (twitchMessages is not null)
                                {
                                    @foreach (var message in twitchMessages)
                                    {
                                        <p>@message</p>
                                    }
                                }
                            </div>
                        </div>
                    }
                    </div>
                </AuthorizeView>
            </div>
            <div class="col-1">
            
            </div>
        </div>
    </div>
    <div class="col-2">
        <AuthorizeView>
            <div class="row">
                <div class="col">
                    <h3>Messages from Chat</h3>
                    <div>
                        @if (twitchMessageList is not null)
                        {
                            @foreach (var message in twitchMessageList)
                            {
                                <p>@message.ChatterUserName: @message.Message.Text</p>
                            }
                        }
                    </div>
                </div>
            </div>
        </AuthorizeView>
    </div>
</div>

@code {
    private StreamWorksUserModel loggedInUser = default!;
    private ClaimsPrincipal? loggedInUserAuthState;
    private List<GetUserDataModel>? twitchUserData = new();
    private GetUsersResponse? getUserResponse;
    //private UserAppStateModel userAppState = new();

    private int tryCount = 3;
    private bool mustRefreshToken = false;
    private bool accessCodeValid = false;

    private string ClientId = "";
    private string AccessToken = "";
    private string HubConnectionId = "";

    private string UserId = "";
    private string? BroadcasterId = "";

    private List<ChannelChatMessage>? twitchMessageList = new();
    private List<string>? twitchMessages = new();
    private ChannelChatMessage twitchMessage = new();

    private HubConnection? twitchHub;
    TwitchConnectionModel twitchConnectionData = new();
    IList<Claim> claims = new List<Claim>();

    private GetEventSubSubscriptionsResponse? eventSubSubscriptions;
    private List<EventSubSubscription> subscriptions = new();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //userAppState = await appState.GetUserStateData(loggedInUser);
        Logger.LogInformation($"UserAppState: {userAppState?.UserId}");

        twitchHub = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/twitchhub"))
            .WithAutomaticReconnect()
            .Build();

        HubConnectionId = twitchHub.ConnectionId ?? "No Hub Connection";


        // TWITCH HUB ACTIONS ==============>>
        // Twitch Chat Message Received
        twitchHub.On<ChannelChatMessage>("ChatMessageReceived", (message) => 
        { 
            Logger.LogInformation($"Message on Home Page: From {message.ChatterUserName} : {message.Message.Text}");
            AddTwitchMessage(message);
        });

        twitchHub.On<GetEventSubSubscriptionsResponse>("GetSubscribedEvents", (subscriptionData) =>
        {
            eventSubSubscriptions = subscriptionData;
        });

        // =================================>>

        await twitchHub.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RunSetup();
        }
    }

    public async Task RunSetup()
    {
        await appState.SetUserData();
    }

    public async Task CheckLoggedInUser()
    {
        if (loggedInUser is null)
        {
            Console.WriteLine($"No logged in user..");

            if (AuthProvider is not null)
            {
                Console.WriteLine($"AuthProvider ready!");

                var authState = await AuthProvider.GetAuthenticationStateAsync();

                if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated == true)
                {
                    loggedInUserAuthState = authState.User;

                    foreach (var identity in loggedInUserAuthState.Identities)
                    {
                        identity.Claims.ToList().ForEach(c => Console.WriteLine($"{c.Type}: {c.Value}"));
                    }

                    loggedInUser = await AuthProvider.GetUserFromAuth(userData);
                    Logger.LogInformation($"Current LoggedInUser: {loggedInUser.UserName}");

                    if (twitchHub is not null)
                    {
                        var groupName = loggedInUser.Id.ToString();
                        await twitchHub.SendAsync("JoinGroup", groupName);
                        Logger.LogInformation($"Joined Group: {groupName}");
                    }
                }
                else
                {
                    Logger.LogError($"Please login..");
                    return;
                }
            }
        }
        else
        {
            Logger.LogInformation($"Current LoggedInUser: {loggedInUser.UserName}");
        }
    }

    public void SetupTwitchUser()
    {
        if(loggedInUser is not null)
        {
            if (loggedInUser.Logins.Where(l => l.LoginProvider == "TwitchLogin").Count() > 0)
            {
                Logger.LogInformation($"Setting Twitch Connection");

                SetTwitchConnectionData();

                if (loggedInUser.Tokens is not null)
                {
                    AccessToken = loggedInUser.Tokens.Where(t => t.Name == "access_token").First().Value;
                    twitchApi.Settings.AccessToken = AccessToken;
                    Logger.LogInformation($"After Set User, {loggedInUser.UserName}'s Access Token: {AccessToken}");
                }

                UserId = loggedInUser.Logins.Where(l => l.LoginProvider == "TwitchLogin").ToList().First().ProviderKey;
                ClientId = twitchConnectionData.ClientId ?? "No Client ID";
            }
        }
        else
        {
            Logger.LogError("User is null!");
        }
    }

    private void SetTwitchConnectionData()
    {
        var refreshToken = loggedInUser?.GetToken("TwitchLogin", "refresh_token").Value;
        Logger.LogInformation($"Refresh Token Check and Set: {refreshToken}");

        if (loggedInUser is not null && String.IsNullOrWhiteSpace(UserId))
        {
            UserId = loggedInUser.Logins.Where(l => l.LoginProvider == "TwitchLogin").First().ProviderKey;
            Logger.LogInformation($"User Twitch ID is: {UserId}");
        }
        if (loggedInUser is not null && String.IsNullOrWhiteSpace(BroadcasterId))
        {
            // Sets the broadcaster ID to the same as the UserId.
            // BroadcasterId = config["Twitch:DefaultBroadcaster"];
            BroadcasterId = UserId;
            Logger.LogInformation($"Twitch BroadcasterID is: {BroadcasterId}");
        }

        if (refreshToken is not null)
        {
            twitchConnectionData.ClientId = config["Twitch:ClientId"];
            Logger.LogInformation($"Client ID: {twitchConnectionData.ClientId}");

            twitchConnectionData.ClientSecret = config["Twitch:ClientSecret"];
            Logger.LogInformation($"Client Secret: {twitchConnectionData.ClientSecret}");

            twitchConnectionData.RedirectUri = NavManager.Uri.ToString();
            Logger.LogInformation($"Redirect URI: {twitchConnectionData.RedirectUri}");

            twitchConnectionData.Scopes = new TwitchScope();

            twitchConnectionData.RefreshToken = refreshToken;
            Logger.LogInformation($"Refresh Token: {twitchConnectionData.RefreshToken}");
        }
        else
        {
            Logger.LogError($"Refresh Token was null!");
        };
    }

    private async Task<bool> GetTwitchUserData(string accessToken)
    {
        Logger.LogInformation("Getting Twitch User Data...");

        if (String.IsNullOrWhiteSpace(UserId))
        {
            UserId = loggedInUser.Logins.Where(l => l.LoginProvider == "TwitchLogin").ToList().First().ProviderKey;
        }

        //getUserResponse = await twitchInternalUserApi.GetTwitchUserData(name, accessToken);
        getUserResponse = await GetTwitchUserDataFromApi(UserId);

        await Task.Delay(1000);

        if (getUserResponse is not null)
        {
            Logger.LogInformation($"Response not null!");

            if (getUserResponse.Users.Count() > 0)
            {
                Logger.LogInformation($"User Count is greater than 0!");

                foreach (var user in getUserResponse.Users)
                {
                    var userData = new GetUserDataModel();

                    userData.DisplayName = user.DisplayName;
                    userData.Id = user.Id;
                    userData.BroadcasterType = user.BroadcasterType;
                    userData.Description = user.Description;
                    userData.ProfileImageUrl = user.ProfileImageUrl;
                    userData.OfflineImageUrl = user.OfflineImageUrl;
                    userData.CreatedAt = user.CreatedAt;
                    userData.ViewCount = user.ViewCount;

                    twitchUserData?.Add(userData);
                }
                Logger.LogInformation($"User Data: {twitchUserData?.First().DisplayName}");
                StateHasChanged();

                return true;
            }
            else
            {
                Logger.LogError("Result didn't contain any Users");
                return false;
            }
        }
        else
        {
            mustRefreshToken = true;
            Logger.LogError("Failed to get User Data. Refreshing token!");
            return false;
        }
    }

    private async Task RefreshTwitchToken()
    {
        Logger.LogInformation($"Starting Refresh Token...");

        var refreshedToken = await twitchApi.Auth.RefreshAuthTokenAsync(twitchConnectionData.RefreshToken,
                twitchApi.Settings.Secret = twitchConnectionData.ClientSecret);

        if (refreshedToken is not null)
        {
            Logger.LogInformation($"Refresh Token Response not null!");
            try
            {
                var expiresAt = DateTimeOffset.Now.AddSeconds(refreshedToken.ExpiresIn).ToString();
                Logger.LogInformation($"Received Token: {refreshedToken.AccessToken}");

                await UserManager.SetAuthenticationTokenAsync(loggedInUser, "TwitchLogin", "access_token", refreshedToken.AccessToken);
                await UserManager.SetAuthenticationTokenAsync(loggedInUser, "TwitchLogin", "refresh_token", refreshedToken.RefreshToken);
                await UserManager.SetAuthenticationTokenAsync(loggedInUser, "TwitchLogin", "expires_at", expiresAt);

                Logger.LogInformation($"Current LoggedInUser Token: {loggedInUser?.Tokens.Where(t => t.Name == "access_token").First().Value}");

                twitchApi.Settings.AccessToken = refreshedToken.AccessToken;
            }
            catch (Exception ex)
            {
                Logger.LogError($"Failed to update user tokens: {ex.Message}");
            }
        }
    }

    public async Task TwitchApiSetup()
    {
        // Call API as a test
        if (AccessToken is not null)
        {
            // Setup EventSub with data after testing
            Logger.LogInformation("Setting up EventSub");

            if (twitchHub is null) 
            {
                Logger.LogError("Twitch Hub is null! Will not call twitchHub.");
                return; 
            };
            // await twitchHub.SendAsync("SetupConnectionRequest", AccessToken, UserId, BroadcasterId);
            // await twitchHub.SendAsync("StartServiceRequest");

            // var user = loggedInUserAuthState?.Claims.Where(c => c.Type == "user_id").First().Value;
            await twitchHub.SendAsync("SetupConnectionRequest", loggedInUser.Id, AccessToken, UserId);
        }
        else
        {
            Logger.LogWarning($"Access Token was null!");
        }
    }

    private async Task RevokeTwitchToken()
    {
        Logger.LogInformation("Revoking Twitch Token");
        // https://id.twitch.tv/oauth2/revoke
        await clientFactory.CreateClient().PostAsync("https://id.twitch.tv/oauth2/revoke",
        new FormUrlEncodedContent(
            new Dictionary<string, string>
                {
                    ["client_id"] = ClientId,
                    ["token"] = AccessToken
                }
        ));
    }

    public async ValueTask DisposeAsync()
    {
        if (twitchHub is not null)
        {
            await twitchHub.DisposeAsync();
        }
    }

    private async Task GetEventSubscriptions()
    {
        // await twitchHub.SendAsync("SubscriptionsRequest");
        // StateHasChanged();
        //eventSubSubscriptions = await twitchInternalEventApi.GetEventSubSubscriptions(UserId, ClientId, AccessToken);
    }

    private void AddTwitchMessage(ChannelChatMessage message)
    {
        twitchMessageList?.Add(message);
        var encodedMessage = $"{message.ChatterUserName}: {message.Message.Text}";
        twitchMessages?.Add(encodedMessage);
        InvokeAsync(StateHasChanged);
    }

    public async Task<GetUsersResponse> GetTwitchUserDataFromApi(string id)
    {
        // var logins =  new List<string>();
        // logins.Add(id);

        try
        {
            var user = await twitchApi.Helix.Users.GetUsersAsync();
            return user;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error getting user data from Twitch. Error Code is: {ex.HResult}");
        }

        return null;
    }
}