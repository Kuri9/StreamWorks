@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication

@* Fires OnInitilaize 2x and secondtime doesnt get user from HttpContext *@
@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthProvider
@inject UserManager<StreamWorksUserModel> UserManager
@inject SignInManager<StreamWorksUserModel> SignInManager
@inject NavigationManager NavManager
@inject IdentityUserAccessor UserAccessor
@inject IStreamWorksUserData userData
@inject IConfiguration config

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.


<AuthorizeView Policy="Admin">
    @if (loggedInUser is not null)
    {
        <h4>@loggedInUser.Id</h4>
        <h3>@loggedInUser.UserName</h3>

       <ul>
            @foreach (var logins in loggedInUser.Logins)
            {
                <li>
                    <ul>
                        <li>
                            <h4>@logins.LoginProvider</h4>
                        </li>
                        <li>
                            @logins.ProviderKey
                        </li>
                        <li>
                            @logins.ProviderDisplayName
                        </li>
                    </ul>
                </li>
            }
        </ul>

@*         <ul>
            @if (loggedInUserAuthState is not null) {
                @foreach (var claim in loggedInUserAuthState?.User.Claims)
                {
                    <li>
                        @claim.Issuer / @claim.Value / @claim.Type
                    </li>
                }
            }
        </ul> *@

        <ul>
            @foreach (var role in loggedInUser.Roles)
            {
                <li>
                    @role
                </li>
            }
        </ul>
    } 

    <h2>Twitch Connection Data</h2>
    <Button class="btn btn-dark" @onclick="SetTwitchConnectionData">Set Twitch Connection Data</Button>

    </AuthorizeView>

@code {
    private StreamWorksUserModel loggedInUser = default!;
    private ClaimsPrincipal? loggedInUserAuthState;

    TwitchConnectionModel twitchConnectionData = new();
    IList<Claim> claims = new List<Claim>();

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthProvider is not null)
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            loggedInUserAuthState = authState.User;

            foreach (var identity in loggedInUserAuthState.Identities)
            {
                identity.Claims.ToList().ForEach(c => Console.WriteLine(c.Value));
            }
            if (authState.User is not null)
            {
                loggedInUser = await AuthProvider.GetUserFromAuth(userData);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
    }

    public async Task SetTwitchConnectionData()
    {
        if (loggedInUser is null)
        {
            if (AuthProvider is not null)
            {
                var authState = await AuthProvider.GetAuthenticationStateAsync();
                loggedInUserAuthState = authState.User;

                foreach (var identity in loggedInUserAuthState.Identities)
                {
                    identity.Claims.ToList().ForEach(c => Console.WriteLine(c.Value));
                }
                
                loggedInUser = await AuthProvider.GetUserFromAuth(userData);
            }
        }

        var refreshToken = loggedInUser?.GetToken("TwitchLogin", "refresh_token").Value;

        if (refreshToken is not null)
        {
            twitchConnectionData.ClientId = config["Twitch:ClientId"];
            Console.WriteLine($"Client ID: {twitchConnectionData.ClientId}");

            twitchConnectionData.ClientSecret = config["Twitch:ClientSecret"];
            Console.WriteLine($"Client Secret: {twitchConnectionData.ClientSecret}");

            twitchConnectionData.RedirectUri = NavManager.Uri.ToString();
            Console.WriteLine($"Redirect URI: {twitchConnectionData.RedirectUri}");

            twitchConnectionData.Scopes = [];
            
            twitchConnectionData.RefreshToken = refreshToken;
            Console.WriteLine($"Refresh Token: {twitchConnectionData.RefreshToken}");
        };
    }

}