@page "/twitch-tools/sub-timer"
@* @using SuperShivaUI.Components.StreamServices *@
@rendermode InteractiveServer
@attribute [Authorize]

@using System.Timers;
@using Components.Twitch.StreamTimer.TimerClasses
@using StreamWorks.Library.DataAccess.MongoDB.StreamWorks.Widgets.Timers
@using StreamWorks.Library.Models.Widgets.Timers
@using StreamWorks.Models.Widgets.Timers
@using TwitchLib.EventSub.Core.SubscriptionTypes.Channel
@implements IDisposable
@inherits ComponentBase

@inject ILogger<SubathonTimer> Logger
@inject IConfiguration config
@inject IStreamWorksUserData userData
@inject IStreamWorksTimerData timerConfig
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<div class="page-title">
    <h2>Subathon Timer</h2>
</div>

<div class="row m-3">

    @* Main Column Here *@
    <div class="col-12">
        <div class="row">

            @* This is the start of the left column *@
            <div class="col-3">

                <div class="row mb-3">
                    <div class="d-grid button-connected-group">
                        <Button Class="btn btn-lg btn-dark" Disabled="@isTimerRunning" @onclick="StartTimer">Start</Button>
                        <Button Class="btn btn-lg btn-dark" Disabled="@isTimerStopped" @onclick="StopTimer">Stop</Button>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Gear" Class="me-1" />
                        <span>Settings</span>
                    </div>
                    <div class="d-grid button-connected-group">
                        <button class="btn btn-light" @onclick="ResetTimer">Set</button>
                        <button class="btn btn-warning" @onclick="ShowOffcanvasAsync">Edit Timer Settings</button>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Clock" Class="me-1" />
                        <span>Show Timers</span>
                    </div>
                    <div class="d-grid button-connected-group">
                        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Active="timerData.TimerSettings.IsShowRemaining" ElementId="remainingButton" @onclick="@(() => ToggleTimeAsync(remainingButton))">Remaining Time</Button>
                        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Active="timerData.TimerSettings.IsShowElapsed" ElementId="elapsedButton" @onclick="@(() => ToggleTimeAsync(elapsedButton))">Elapsed Time</Button>
                        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Active="timerData.TimerSettings.IsShowTotal" ElementId="totalButton" @onclick="@(() => ToggleTimeAsync(totalButton))">Total Time</Button>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Calendar" Class="me-1" />
                        <span>Time Format</span>
                    </div>
                    <div class="d-grid button-connected-group">
                        <Button Class="btn btn-secondary" Active="isTimeFormat" @onclick="SetTimeFormatToClock">00:00:00:00 Format</Button>
                        <Button Class="btn btn-secondary" Active="isDateFormat" @onclick="SetTimeFormatToChar">00d 00h 00m 00s Format</Button>
                    </div>
                </div>

            </div>

            @* This is the start of the middle column *@
            <div class="d-grid col-9 mx-auto mt-2">
                <div class="row main-container">
                    
                    <div class="col-12">
                        <div class="main-timer">
                            @if (timerData is not null) 
                            {
                                if (timerData.TimerSettings.IsCompleted == true)
                                {
                                    <h1>Countdown Completed!</h1>
                                }
                                else if (timerData.TimerSettings.IsShowElapsed == true)
                                {
                                    <h1 class="main-timer">@TimeElapsed.ToString(timerData.TimerSettings.TimerFormat)</h1>
                                    <span class="main-timer-label">Elapsed Time / 経過時間</span>
                                }
                                else if (timerData.TimerSettings.IsShowTotal == true)
                                {
                                    <h1 class="main-timer">@timerData.TimerSettings.TotalTime.ToString(timerData.TimerSettings.TimerFormat)</h1>
                                    <span class="main-timer-label">Total Time / 合計時間</span>
                                }
                                else
                                {
                                    <h1 class="main-timer">@TimeLeft.ToString(timerData.TimerSettings.TimerFormat)</h1>
                                    <span class="main-timer-label">Remaining Time / 残りの時間</span>
                                }
                            }
                            else 
                            {
                                <h2>Loading Timer...</h2>
                            }
                        </div>
                    </div>

                    @* <div class="row mb-2 align-content-center">
                        <div class="col d-grid gap-2">
                            <Collapse @ref="collapseElapsedTime">
                                <Card Style="timer-card">
                                    <CardBody>
                                        <div class="sub-timer elapsed-time-timer">@TimeElapsed</div>
                                        <span class="timer-sub-label">Elapsed Time</span>
                                    </CardBody>
                                </Card>
                            </Collapse>
                            <Collapse @ref="collapseTotalTime">
                                <Card Style="timer-card">
                                    <CardBody>
                                        @if (timerData is not null)
                                        {
                                            <div class="sub-timer total-time-timer">@timerData.TotalTime</div>
                                            <span class="timer-sub-label">Total Time</span>
                                        }
                                        else
                                        {
                                            <div class="timer total-time-timer">00: 00: 00: 00</div>
                                            <span class="timer-sub-label">Total Time</span>
                                        }
                                    </CardBody>
                                </Card>
                            </Collapse>
                        </div>
                    </div> *@

                </div>
            </div>
        </div>

    </div>
</div>

<div class="row m-2">
    <Accordion title="Set Counts">
        <AccordionItem>
            <Content>
                <div class="container-fluid">
                    @if (timerData is not null)
                    {
                        <div class="row">

                            <div class="col align-content-stretch">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Twitch" Class="me-1" />
                                        <span>Twitch Events</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(timerData.TwitchEvents.TwitchFollowEvent))">+</button>
                                            <span class="input-layout-item-c">Follow : @timerData.TwitchEvents.TwitchFollowEventCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(timerData.TwitchEvents.TwitchFollowEvent))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Ticket" Class="me-1" />
                                        <span>Twitch Subscriptions</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(timerData.TwitchEvents.TwitchTier1Event))">+</button>
                                            <span class="input-layout-item-c">Tier 1 : @timerData.TwitchEvents.TwitchTier1EventCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(timerData.TwitchEvents.TwitchTier1Event))">-</button>
                                        </div>
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(timerData.TwitchEvents.TwitchTier2Event))">+</button>
                                            <span class="input-layout-item-c">Tier 2 : @timerData.TwitchEvents.TwitchTier2EventCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(timerData.TwitchEvents.TwitchTier2Event))">-</button>
                                        </div>
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(timerData.TwitchEvents.TwitchTier3Event))">+</button>
                                            <span class="input-layout-item-c">Tier 3 : @timerData.TwitchEvents.TwitchTier3EventCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(timerData.TwitchEvents.TwitchTier3Event))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Gift" Class="me-1" />
                                        <span>Twitch Sub Gifts</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="SubGiftsToAdd" />
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier1SubGiftEvent, SubGiftsToAdd))">+</button>
                                            <span class="input-layout-item-c">Tier 1 : @timerData.TwitchEvents.TwitchTotalT1SubGiftCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier1SubGiftEvent, SubGiftsToAdd))">-</button>
                                        </div>
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier2SubGiftEvent, SubGiftsToAdd))">+</button>
                                            <span class="input-layout-item-c input-layout-item-c">Tier 2 : @timerData.TwitchEvents.TwitchTotalT2SubGiftCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier2SubGiftEvent, SubGiftsToAdd))">-</button>
                                        </div>
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier3SubGiftEvent, SubGiftsToAdd))">+</button>
                                            <span class="input-layout-item-c">Tier 3 : @timerData.TwitchEvents.TwitchTotalT3SubGiftCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier3SubGiftEvent, SubGiftsToAdd))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Gem" Class="me-1" />
                                        <span>Twitch Cheers</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="BitsToAdd" />
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchCheerEvent, BitsToAdd))">+</button>
                                            <span class="input-layout-item-c">Cheer : @timerData.TwitchEvents.TwitchCheerEventCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchEvents.TwitchCheerEvent, BitsToAdd))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.People" Class="me-1" />
                                        <span>Twitch Raid</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="RaidersToAdd" />
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchRaidEvent, RaidersToAdd))">+</button>
                                            <span class="input-layout-item-c">Raid : @timerData.TwitchEvents.TwitchRaidEventCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchEvents.TwitchRaidEvent, RaidersToAdd))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Youtube" Class="me-1" />
                                        <span>Youtube Events</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-danger" @onclick="(() => AddTimeYoutube(timerData.YoutubeEvents.YouTubeLikeEvent))">+</button>
                                            <span class="input-layout-item-c">Like : @timerData.YoutubeEvents.YoutubeLikeEventCount</span>
                                            <button class="input-layout-item-d btn btn-danger" @onclick="(() => RemoveTimeYoutube(timerData.YoutubeEvents.YouTubeLikeEvent))">-</button>
                                        </div>
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-danger" @onclick="(() => AddTimeYoutube(timerData.YoutubeEvents.YouTubeSubEvent))">+</button>
                                            <span class="input-layout-item-c">Subscribe : @timerData.YoutubeEvents.YoutubeSubEventCount</span>
                                            <button class="input-layout-item-d btn btn-danger" @onclick="(() => RemoveTimeYoutube(timerData.YoutubeEvents.YouTubeSubEvent))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.CurrencyDollar" Class="me-1" />
                                        <span>Donations</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="DollarsToAdd" />
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmount(timerData.OtherEvents.DonationEvent, DollarsToAdd))">+</button>
                                            <span class="input-layout-item-c">Donations : @timerData.OtherEvents.DonationEventCount</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmount(timerData.OtherEvents.DonationEvent, DollarsToAdd))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Play" Class="me-1" />
                                        <span>Add Time</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="AddExtraTime" />
                                        <div class="d-grid gap-2 mx-auto">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTime(AddExtraTime))">+</button>
                                            <span class="input-layout-item-c">Time</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTime(AddExtraTime))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    }
                    else
                    {
                        <h2>Loading Tools...</h2>
                    }
                </div>
            </Content>
        </AccordionItem>
    </Accordion>
</div>
   
<Offcanvas @ref="timerEditOffcanvas" Placement="Placement.End">
    <HeaderTemplate>
        <h4 class="offcanvas-title" id="offcanvasTimerData">Edit Timer Times</h4>
    </HeaderTemplate>
    <BodyTemplate>
        <div>
            Edit timer data here. All times are in <strong>seconds</strong>!
        </div>
        <div class="timer-setting-form mb-2">
            <EditForm Model="updatedTimerModel" OnSubmit="UpdateTimer">
                <div class="form-group mb-2">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="startingTime">Set Starting Time</label>
                        <InputNumber id="startingTime" class="form-control" @bind-Value="updatedTimerModel.StartingTime" />
                    </div>

                    <div class="col-auto input-group form-check-inline form-switch mb-2">
                        <label class="input-group-text" for="totalCount">Show Total Counts?</label>
                        <InputCheckbox id="totalCount" class="form-check-input" type="checkbox" @bind-Value="updatedTimerModel.ShowTotalCounts" />
                    </div>
                </div>

                <h5>Twitch Events</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchFollowTime">Twitch Follow</label>
                        <input id="time"
                        <InputNumber id="twitchFollowTime" class="form-control" @bind-Value="updatedTimerModel.TwitchFollowTime" />
                    </div>
                </div>

                <h5>Twitch Subscriptions</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier1Time">Twitch Tier 1 Sub</label>
                        <InputNumber id="twitchTier1Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier1Time" />
                    </div>
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier2Time">Twitch Tier 2 Sub</label>
                        <InputNumber id="twitchTier2Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier2Time" />
                    </div>
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier3Time">Twitch Tier 3 Sub</label>
                        <InputNumber id="twitchTier3Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier3Time" />
                    </div>
                </div>

                <h5>Twitch Sub Gifts</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier1GiftTime">Twitch Tier 1 Gift Sub</label>
                        <InputNumber id="twitchTier1GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier1SubGiftTime" />
                    </div>

                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier2GiftTime">Twitch Tier 2 Gift Sub</label>
                        <InputNumber id="twitchTier2GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier2SubGiftTime" />
                    </div>
                    
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier3GiftTime">Twitch Tier 3 Gift Sub</label>
                        <InputNumber id="twitchTier3GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier3SubGiftTime" />
                    </div>
                </div>

                <h5>Twitch Cheers</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchCheerTime">Twitch Cheer: (1 Bit)</label>
                        <InputNumber id="twitchCheerTime" class="form-control" @bind-Value="updatedTimerModel.TwitchCheerTime" />
                    </div>
                </div>

                <h5>Twitch Raids</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchRaidTime">Twitch Raid: (1 Bit)</label>
                        <InputNumber id="twitchRaidTime" class="form-control" @bind-Value="updatedTimerModel.TwitchRaidTime" />
                    </div>
                </div>

                <h5>Youtube Events</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="youtubeLikeTime">Youtube Like</label>
                        <InputNumber id="youtubeLikeTime" class="form-control" @bind-Value="updatedTimerModel.YouTubeLikeTime" />
                    </div>

                    <div class="input-group mb-2">
                        <label class="input-group-text" for="youtubeSubTime">Youtube Subscribe</label>
                        <InputNumber id="youtubeSubTime" class="form-control" @bind-Value="updatedTimerModel.YouTubeSubTime" />
                    </div>
                </div>

                <h5>Donations</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="donationsTime">Donations: ($1)</label>
                        <InputNumber id="donationsTime" class="form-control" @bind-Value="updatedTimerModel.DonationTime" />
                    </div>
                </div>

                <button class="btn btn-outline-primary mt-3" action="submit" @onclick="HideOffcanvasAsync">Update Timer</button>
            </EditForm>
        </div>
    </BodyTemplate>
</Offcanvas>

@code {
    //TODO LIST:
    // 1. Seperate the core timer and functions to a seperate component and read into this page. Make the timer more useable in various situations other pages this way.
    // 2. Add a way to select a timer from a list of timers.
    // 3. Add a way to create a new timer.
    // 4. Add a way to delete a timer.
    // 5. Allow Timers to count both up and down.
    // 6. Move some of these other functions to a seperate component to make this page more readable and code more reusable.

    private StreamWorksUserModel loggedInUser = default!;

    //TODO
    //Set Start Time
    //Remove Time
    //Set base values for all the times
    //Save the data
    private HubConnection? twitchHub;
    private List<StreamTimerModel>? allTimerData = new();
    private StreamTimerModel? timerData = new();
    private CreateStreamTimerModel updatedTimerModel = new();

    // Layout Items
    private Offcanvas timerEditOffcanvas = default!;
    private Collapse collapseElapsedTime = default!;
    private Collapse collapseTotalTime = default!;

    private Timer? _timer = new();
    private TimeSpan currentTime = new();
    private TimeSpan oneSecond = TimeSpan.FromSeconds(1); 

    private string? lastSystemMessage;

    private int SubGiftsToAdd = 0;
    private int BitsToAdd = 0;
    private int RaidersToAdd = 0;
    private int DollarsToAdd = 0;
    private int AddExtraTime = 0;

    private string remainingButton = "remainingButton";
    private string elapsedButton = "elapsedButton";
    private string totalButton = "totalButton";

    private bool isTimeFormat = true;
    private bool isDateFormat = false;

    private bool isTimerStopped = true;
    private bool isTimerRunning = false;

    private bool isShowFormat = false;
    private bool startIsDisabled = false;

    private string? CurrentTimeDisplayFormat;
    //private string? TimeWordFormat = $"{timeSpan.Days} days, {timeSpan.Hours} hours, {timeSpan.Minutes} minutes, {timeSpan.Seconds} seconds";

    protected TimeSpan TimeLeft { get; set; }
    protected TimeSpan TimeElapsed { get; set; }

    // [Parameter]
    // public EventCallback TimerEnded { get; set; }

    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        allTimerData = await timerConfig.GetTimerDataByUserId(loggedInUser.Id);

        twitchHub = new HubConnectionBuilder()
        .WithUrl(navManager.ToAbsoluteUri("/twitchhub"))
        .WithAutomaticReconnect()
        .Build();

        twitchHub.On<ChannelChatMessage>("ChatMessageReceived", (message) =>
        {
            Logger.LogInformation($"Message Received: {message.Message.Text}");
            if (message.Message.Text == "!timer 5")
            {
                AddTime(500);
            }
        });

        twitchHub.On<ChannelFollow>("GetFollows", (follow) =>
        {
            Logger.LogInformation($"Follow Received: {follow.UserName} followed {follow.BroadcasterUserName}");
            if (follow is not null)
            {
                AddTimeTwitch(timerData.TwitchEvents.TwitchFollowEvent ?? "");
            }
        });

        twitchHub.On<ChannelSubscribe>("GetSubscribedEvents", (subscription) =>
        {
            Logger.LogInformation($"Message Received: {subscription.UserName} sent a Tier {subscription.Tier.ToString()} Sub");

            if (subscription is not null && subscription.IsGift == false)
            {
                if (subscription.Tier == "1000")
                {
                    AddTimeTwitch(timerData.TwitchEvents.TwitchTier1Event ?? "");
                }
                else if (subscription.Tier == "2000")
                {
                    AddTimeTwitch(timerData.TwitchEvents.TwitchTier2Event ?? "");
                }
                else if (subscription.Tier == "3000")
                {
                    AddTimeTwitch(timerData.TwitchEvents.TwitchTier3Event ?? "");
                }
            }
        });

        twitchHub.On<ChannelSubscriptionGift>("GetSubscriptionGifts", (subGift) =>
        {
            Logger.LogInformation($"Message Received: {subGift.UserName} sent {subGift.Total} {subGift.Tier} Sub Gift(s)");
            if (subGift is not null)
            {
                if (subGift.Tier == "1000")
                {
                    AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier1SubGiftEvent ?? "", subGift.Total);
                }
                else if (subGift.Tier == "2000")
                {
                    AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier2SubGiftEvent ?? "", subGift.Total);
                }
                else if (subGift.Tier == "3000")
                {
                    AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchTier3SubGiftEvent ?? "", subGift.Total);
                }
            }
        });

        twitchHub.On<ChannelCheer>("GetCheers", (cheer) =>
        {
            Logger.LogInformation($"Message Received: {cheer.UserName} cheered {cheer.Bits} Bits");
            if (cheer is not null && cheer.Bits > 0)
            {
                AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchCheerEvent ?? "", cheer.Bits);
            }

        });

        twitchHub.On<ChannelRaid>("GetRaid", (raid) =>
        {
            Logger.LogInformation($"Message Received: {raid.FromBroadcasterUserId} raided {raid.ToBroadcasterUserName} with {raid.Viewers} viewers!");
            if (raid is not null && raid.Viewers > 0)
            {
                AddTimeWithAmountTwitch(timerData.TwitchEvents.TwitchRaidEvent ?? "", raid.Viewers);
            }

        });

        // twitchHub.On<int>("Tick", newTime =>
        // {
        //     currentTime = newTime;
        //     tickCount += 1;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<int, string>("TimerSet", (time, message) =>
        // {
        //     currentTime = time;
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<string>("TimerStarted", message =>
        // {
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<string>("TimerStopped", message =>
        // {
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        await twitchHub.StartAsync();

        // Join the Hub Group for this User
        var groupName = loggedInUser.Id.ToString();
        await twitchHub.SendAsync("JoinGroup", groupName);
        Logger.LogInformation($"Joined Group: {groupName}");

        // Set Timer
        _timer = new Timer(1000);
        _timer.Elapsed += OnTickEvent;
        _timer.AutoReset = true;

        // Initialize Timer
        await InitializeTimer();
    }

    private async Task ShowOffcanvasAsync()
    {
        await timerEditOffcanvas.ShowAsync();
    }
    private async Task HideOffcanvasAsync()
    {
        await timerEditOffcanvas.HideAsync();
    }

    private void ToggleTimeAsync(string buttonName) 
    {
        if (timerData is not null)
        {
            if (buttonName == "remainingButton")
            {
                timerData.TimerSettings.IsShowRemaining = true;
                timerData.TimerSettings.IsShowElapsed = false;
                timerData.TimerSettings.IsShowTotal = false;
            }
            else if (buttonName == "elapsedButton")
            {
                timerData.TimerSettings.IsShowRemaining = false;
                timerData.TimerSettings.IsShowElapsed = true;
                timerData.TimerSettings.IsShowTotal = false;
            }
            else
            {
                timerData.TimerSettings.IsShowRemaining = false;
                timerData.TimerSettings.IsShowElapsed = false;
                timerData.TimerSettings.IsShowTotal = true;
            }
        }

        // await collapseElapsedTime.ToggleAsync();
    }
    private async Task ToggleTotalTimeAsync()
    {
        if (timerData is null)         
        {
            Logger.LogError("Timer Data is null. Cannot toggle Total Time.");
            return;
        }
        if (timerData.TimerSettings.IsShowTotal)
        {
            timerData.TimerSettings.IsShowTotal = false;
        }
        else
        {
            timerData.TimerSettings.IsShowTotal = true;
            timerData.TimerSettings.IsShowRemaining = false;
            timerData.TimerSettings.IsShowElapsed = false;
        }
        await collapseTotalTime.ToggleAsync();
    }
    private void ToggleStartButton()
    {
        if (timerData is not null)
        {
            if (timerData.TimerSettings.IsRunning)
            {
                startIsDisabled = true;
            }
            else
            {
                startIsDisabled = false;
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public async Task InitializeTimer()
    {
        ErrorMessage = "";

        // TODO: Select timer from a list +  Create a new timer button
        //var result = await timerConfig.GetTimerDataByUserId(loggedInUser.Id);

        // Initialize New Timer Data if no timers are found for the user
        if (allTimerData is null || allTimerData.Count() < 1)
        {
            await CreateTimer();
        }
        else
        {
            // Fill in with first timer found
            timerData = allTimerData.First();

            if (timerData is not null)
            {
                TimeLeft = timerData.CurrentTime;
                TimeElapsed = timerData.TimerSettings.TotalTime - timerData.CurrentTime;
            }
            else
            {
                await CreateTimer();
            }
        }

        SetupTimerUpdateModel();
    }

    public TimeSpan SetTime(double secondsToRun)
    {
        return TimeSpan.FromSeconds(secondsToRun);
    }

    public async Task UpdateTime()
    {
        if (timerData is not null)
        {
            timerData.CurrentTime += timerData.AddTime;
            timerData.TimerSettings.TotalTime += timerData.AddTime;
            TimeLeft = timerData.CurrentTime;
            await InvokeAsync(StateHasChanged);
            await SaveTimer();
        }
    }

    public void SetTimeFormatToClock()
    {
        if (timerData is not null)
        {
            isTimeFormat = true;
            isDateFormat = false;
            timerData.TimerSettings.TimerFormat = timerData.TimerSettings.TimeNumFormat;
            InvokeAsync(StateHasChanged);
        }
    }

    public void SetTimeFormatToChar()
    {
        if (timerData is not null)
        {
            isTimeFormat = false;
            isDateFormat = true;
            timerData.TimerSettings.TimerFormat = timerData.TimerSettings.TimeCharFormat;
            InvokeAsync(StateHasChanged);
        }
    }

    public async Task StartTimer()
    {
        ErrorMessage = "";

        if (timerData is not null)
        {
            if (timerData.TimerSettings.FirstRun == true)
            {
                timerData.CurrentTime = timerData.TimerSettings.StartingTime;
                timerData.TimerSettings.TotalTime = timerData.TimerSettings.StartingTime;

                TimeLeft = timerData.TimerSettings.StartingTime;
                TimeElapsed = SetTime(0);

                timerData.TimerSettings.FirstRun = false;
                timerData.TimerSettings.IsRunning = true;
                await SaveTimer();
            }
            else
            {
                timerData.TimerSettings.IsRunning = true;
                await SaveTimer();
            }

            _timer?.Start();
            isTimerRunning = true;
            isTimerStopped = false;
        }
        else
        {
            Logger.LogError("Timer data was null. Creating new Timer..");
            await InitializeTimer();
        }
    }

    public async Task StopTimer()
    {
        _timer?.Stop();
        isTimerRunning = false;
        isTimerStopped = true;

        if (timerData is not null)
        {
            timerData.TimerSettings.IsRunning = false;
            await SaveTimer();
        }
    }

    public void SetupTimerUpdateModel()
    {
        if (timerData is null)
        {
            ErrorMessage = "Could not load Timer settings. Timer Data is null";
            Logger.LogError("Timer Data is null");
            return;
        }
        updatedTimerModel = new();

        updatedTimerModel.StartingTime = timerData.TimerSettings.StartingTime.TotalSeconds;
        updatedTimerModel.ShowTotalCounts = timerData.TimerSettings.ShowTotalCounts;

        // Twitch: Set Data in Update Model
        updatedTimerModel.TwitchFollowTime = timerData.TwitchEvents.SetTwitchFollowTime.TotalSeconds;
        updatedTimerModel.TwitchTier1Time = timerData.TwitchEvents.SetTwitchTier1Time.TotalSeconds;
        updatedTimerModel.TwitchTier2Time = timerData.TwitchEvents.SetTwitchTier2Time.TotalSeconds;
        updatedTimerModel.TwitchTier3Time = timerData.TwitchEvents.SetTwitchTier3Time.TotalSeconds;

        updatedTimerModel.TwitchTier1SubGiftTime = timerData.TwitchEvents.SetTwitchTier1SubGiftTime.TotalSeconds;
        updatedTimerModel.TwitchTier2SubGiftTime = timerData.TwitchEvents.SetTwitchTier2SubGiftTime.TotalSeconds;
        updatedTimerModel.TwitchTier3SubGiftTime = timerData.TwitchEvents.SetTwitchTier3SubGiftTime.TotalSeconds;

        updatedTimerModel.TwitchCheerTime = timerData.TwitchEvents.SetTwitchCheerTime.TotalSeconds;
        updatedTimerModel.TwitchRaidTime = timerData.TwitchEvents.SetTwitchRaidTime.TotalSeconds;

        // Youtube
        updatedTimerModel.YouTubeLikeTime = timerData.YoutubeEvents.SetYouTubeLikeTime.TotalSeconds;
        updatedTimerModel.YouTubeSubTime = timerData.YoutubeEvents.SetYouTubeSubTime.TotalSeconds;

        // Other
        updatedTimerModel.DonationTime = timerData.OtherEvents.SetDonationTime.TotalSeconds;
    }

    public async Task ResetTimer()
    {
        ErrorMessage = "";

        _timer?.Stop();

        if (timerData is not null)
        {
            timerData.TimerSettings.LastSetTime = timerData.CurrentTime;

            timerData.CurrentTime = timerData.TimerSettings.StartingTime;
            timerData.TimerSettings.TotalTime = timerData.TimerSettings.StartingTime;

            TimeLeft = timerData.TimerSettings.StartingTime;
            TimeElapsed = SetTime(0);

            // Clear all Event Counts and rest them, to 0
            ResetEventCounts();

            timerData.TimerSettings.IsRunning = false;
            timerData.TimerSettings.IsCompleted = false;

            timerData.TimerSettings.FirstRun = true;
            StateHasChanged();
            await SaveTimer();
        }
        else
        {
            await InitializeTimer();
        }
    }

    private async void OnTickEvent(object? sender, ElapsedEventArgs e)
    {
        if (timerData is not null)
        {
            TimeLeft = TimeLeft.Subtract(oneSecond);
            timerData.CurrentTime = timerData.CurrentTime.Subtract(oneSecond);
            TimeElapsed = timerData.TimerSettings.TotalTime - timerData.CurrentTime;

            await InvokeAsync(StateHasChanged);

            if (timerData.CurrentTime.Equals(TimeSpan.Zero))
            {
                await TimerEnded();
            }
        }
        else
        {
            await InitializeTimer();
        }
    }

    private async Task TimerEnded()
    {
        _timer?.Stop();

        if (timerData is not null)
        {
            timerData.TimerSettings.IsRunning = false;
            timerData.TimerSettings.IsCompleted = true;

            Logger.LogInformation("Timer Ended");
            await InvokeAsync(StateHasChanged);
            await SaveTimer();
        }

        Logger.LogInformation("Timer Ended");
    }

    public void Dispose()
    {
        if (_timer is not null)
        {
            _timer.Dispose();
        }
    }

    public async Task AddTimeTwitch(string twitchEvent)
    {
        if (timerData is not null)
        {
            timerData.AddTime = TimeSpan.Zero;

            if (twitchEvent == timerData.TwitchEvents.TwitchFollowEvent)
            {
                timerData.TwitchEvents.TwitchFollowEventCount++;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchFollowTime;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier1Event)
            {
                timerData.TwitchEvents.TwitchTier1EventCount++;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier1Time;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier2Event)
            {
                timerData.TwitchEvents.TwitchTier2EventCount++;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier2Time;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier3Event)
            {
                timerData.TwitchEvents.TwitchTier3EventCount++;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier3Time;
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time.");
        }
    }

    public async Task AddTimeWithAmountTwitch(string twitchEvent, int amount)
    {
        if (amount < 0)
        {
            amount *= -1;
        }

        if (timerData is not null)
        {
            if (twitchEvent == timerData.TwitchEvents.TwitchTier1SubGiftEvent)
            {
                timerData.TwitchEvents.TwitchSubGiftEventCount++;
                timerData.TwitchEvents.TwitchTotalSubGiftCount += amount;
                timerData.TwitchEvents.TwitchTotalT1SubGiftCount += amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier1SubGiftTime * amount;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier2SubGiftEvent)
            {
                timerData.TwitchEvents.TwitchSubGiftEventCount++;
                timerData.TwitchEvents.TwitchTotalSubGiftCount += amount;
                timerData.TwitchEvents.TwitchTotalT2SubGiftCount += amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier2SubGiftTime * amount;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier3SubGiftEvent)
            {
                timerData.TwitchEvents.TwitchSubGiftEventCount++;
                timerData.TwitchEvents.TwitchTotalSubGiftCount += amount;
                timerData.TwitchEvents.TwitchTotalT3SubGiftCount += amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier3SubGiftTime * amount;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchCheerEvent)
            {
                timerData.TwitchEvents.TwitchCheerEventCount++;
                timerData.TwitchEvents.TwitchTotalCheerAmount += amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchCheerTime * amount;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchRaidEvent)
            {
                timerData.TwitchEvents.TwitchRaidEventCount++;
                timerData.TwitchEvents.TwitchTotalRaidAmount += amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchRaidTime * amount;
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task AddTime(int time)
    {
        if (time < 0)
        {
            time *= -1;
        }
        if (timerData is not null)
        {
            timerData.AddTime = TimeSpan.FromSeconds(time);
            timerData.CurrentTime += timerData.AddTime;
            timerData.TimerSettings.TotalTime += timerData.AddTime;
            TimeLeft = timerData.CurrentTime;
            await InvokeAsync(StateHasChanged);
            await SaveTimer();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time from Chat");
        }
    }

    public async Task RemoveTimeTwitch(string twitchEvent)
    {
        if (timerData is not null)
        {
            if (twitchEvent == timerData.TwitchEvents.TwitchFollowEvent)
            {
                timerData.TwitchEvents.TwitchFollowEventCount--;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchFollowTime * -1;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier1Event)
            {
                timerData.TwitchEvents.TwitchTier1EventCount--;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier1Time * -1;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier2Event)
            {
                timerData.TwitchEvents.TwitchTier2EventCount--;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier2Time * -1;
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier3Event)
            {
                timerData.TwitchEvents.TwitchTier3EventCount--;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier3Time * -1;
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task RemoveTimeWithAmountTwitch(string twitchEvent, int amount)
    {
        if (amount < 0)
        {
            amount *= -1;
        }

        if (timerData is not null)
        {
            if (twitchEvent == timerData.TwitchEvents.TwitchTier1SubGiftEvent)
            {
                timerData.TwitchEvents.TwitchSubGiftEventCount--;
                timerData.TwitchEvents.TwitchTotalSubGiftCount -= amount;

                timerData.TwitchEvents.TwitchTotalT1SubGiftCount -= amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier1SubGiftTime * -(amount);
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier2SubGiftEvent)
            {
                timerData.TwitchEvents.TwitchSubGiftEventCount--;
                timerData.TwitchEvents.TwitchTotalSubGiftCount -= amount;

                timerData.TwitchEvents.TwitchTotalT2SubGiftCount -= amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier2SubGiftTime * -(amount);
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchTier3SubGiftEvent)
            {
                timerData.TwitchEvents.TwitchSubGiftEventCount--;
                timerData.TwitchEvents.TwitchTotalSubGiftCount -= amount;

                timerData.TwitchEvents.TwitchTotalT3SubGiftCount -= amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchTier3SubGiftTime * -(amount);
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchCheerEvent)
            {
                timerData.TwitchEvents.TwitchCheerEventCount--;
                timerData.TwitchEvents.TwitchTotalCheerAmount -= amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchCheerTime * -(amount);
            }
            else if (twitchEvent == timerData.TwitchEvents.TwitchRaidEvent)
            {
                timerData.TwitchEvents.TwitchRaidEventCount--;
                timerData.TwitchEvents.TwitchTotalRaidAmount -= amount;
                timerData.AddTime = timerData.TwitchEvents.SetTwitchCheerTime * -(amount);
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task AddTimeYoutube(string youtubeEvent)
    {
        if (timerData is not null)
        {
            switch (youtubeEvent)
            {
                case "YoutubeLike":
                    timerData.YoutubeEvents.YoutubeLikeEventCount++;
                    timerData.AddTime = timerData.YoutubeEvents.SetYouTubeLikeTime;
                    break;

                case "YoutubeSubscribe":
                    timerData.YoutubeEvents.YoutubeSubEventCount++;
                    timerData.AddTime = timerData.YoutubeEvents.SetYouTubeSubTime;
                    break;

                default:
                    timerData.AddTime = timerData.TimerSettings.DefaultTime;
                    break;
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task RemoveTimeYoutube(string youtubeEvent)
    {
        if (timerData is not null)
        {
            switch (youtubeEvent)
            {
                case "YoutubeLike":
                    timerData.YoutubeEvents.YoutubeLikeEventCount--;
                    timerData.AddTime = -(timerData.YoutubeEvents.SetYouTubeLikeTime);
                    break;

                case "YoutubeSubscribe":
                    timerData.YoutubeEvents.YoutubeSubEventCount--;
                    timerData.AddTime = -(timerData.YoutubeEvents.SetYouTubeSubTime);
                    break;

                default:
                    timerData.AddTime = -(timerData.TimerSettings.DefaultTime);
                    break;
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task AddTimeWithAmount(string eventName, int amount)
    {
        if (amount < 0)
        {
            amount *= -1;
        }

        if (timerData is not null)
        {
            if (eventName == timerData.OtherEvents.DonationEvent)
            {
                timerData.OtherEvents.DonationEventCount++;
                timerData.AddTime = timerData.OtherEvents.SetDonationTime * amount;
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task RemoveTimeWithAmount(string eventName, int amount)
    {
        if (amount < 0)
        {
            amount *= -1;
        }

        if (timerData is not null)
        {
            if (eventName == timerData.OtherEvents.DonationEvent)
            {
                timerData.OtherEvents.DonationEventCount--;
                timerData.AddTime = timerData.OtherEvents.SetDonationTime * -(amount);
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task RemoveTime(int time)
    {
        if (time < 0)
        {
            time *= -1;
        }
        if (timerData is not null)
        {
            timerData.AddTime = TimeSpan.FromSeconds(time);
            timerData.CurrentTime -= timerData.AddTime;
            timerData.TimerSettings.TotalTime -= timerData.AddTime;
            TimeLeft = timerData.CurrentTime;
            await InvokeAsync(StateHasChanged);
            await SaveTimer();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time from Chat");
        }
    }

    public void ResetEventCounts()
    {
        if (timerData is not null)
        {
            timerData.TwitchEvents.TwitchFollowEventCount = 0;

            timerData.TwitchEvents.TwitchTier1EventCount = 0;
            timerData.TwitchEvents.TwitchTier2EventCount = 0;
            timerData.TwitchEvents.TwitchTier3EventCount = 0;

            timerData.TwitchEvents.TwitchSubGiftEventCount = 0;
            timerData.TwitchEvents.TwitchTotalSubGiftCount = 0;
            timerData.TwitchEvents.TwitchTotalT1SubGiftCount = 0;
            timerData.TwitchEvents.TwitchTotalT2SubGiftCount = 0;
            timerData.TwitchEvents.TwitchTotalT3SubGiftCount = 0;

            timerData.TwitchEvents.TwitchCheerEventCount = 0;
            timerData.TwitchEvents.TwitchTotalCheerAmount = 0;

            timerData.TwitchEvents.TwitchRaidEventCount = 0;
            timerData.TwitchEvents.TwitchTotalRaidAmount = 0;

            timerData.YoutubeEvents.YoutubeLikeEventCount = 0;
            timerData.YoutubeEvents.YoutubeSubEventCount = 0;
        }
    }

    public async Task SetHubTimer()
    {
        // currentTime = startTime;
        // streamTimer.SetTimer(1000);
        // streamTimer.OnTick += TickHandler;
        if (twitchHub is not null)
        {
            await twitchHub.SendAsync("SetTimer");
        }
    }

    public async Task StartHubTimer()
    {
        //streamTimer.StartTimer();
        if (twitchHub is not null)
        {
            await twitchHub.SendAsync("StartTimer");
        }
    }

    private async Task CreateTimer()
    {
        timerData = new();
        timerData.UserId = loggedInUser.Id;
        timerData.CurrentTime = SetTime(0);
        timerData.TimerSettings.TimerTitle = "Default Title";

        try
        {
            await timerConfig.CreateTimerData(timerData);
            Logger.LogError("New Time created.");
        }
        catch
        {
            ErrorMessage = "Could not create Timer. Timer Data is null";
            Logger.LogError("Timer Data is null");
        }
    }

    private async Task UpdateTimer()
    {
        if (timerData is null)
        {
            ErrorMessage = "Could not update Timer. Timer Data is null";
            Logger.LogError("Timer Data is null");
            return;
        }
        timerData.TimerSettings.StartingTime = TimeSpan.FromSeconds(updatedTimerModel.StartingTime);
        timerData.TimerSettings.ShowTotalCounts = updatedTimerModel.ShowTotalCounts;

        // Twitch
        timerData.TwitchEvents.SetTwitchFollowTime = TimeSpan.FromSeconds(updatedTimerModel.TwitchFollowTime);
        timerData.TwitchEvents.SetTwitchTier1Time = TimeSpan.FromSeconds(updatedTimerModel.TwitchTier1Time);
        timerData.TwitchEvents.SetTwitchTier2Time = TimeSpan.FromSeconds(updatedTimerModel.TwitchTier2Time);
        timerData.TwitchEvents.SetTwitchTier3Time = TimeSpan.FromSeconds(updatedTimerModel.TwitchTier3Time);

        timerData.TwitchEvents.SetTwitchTier1SubGiftTime = TimeSpan.FromSeconds(updatedTimerModel.TwitchTier1SubGiftTime);
        timerData.TwitchEvents.SetTwitchTier2SubGiftTime = TimeSpan.FromSeconds(updatedTimerModel.TwitchTier2SubGiftTime);
        timerData.TwitchEvents.SetTwitchTier3SubGiftTime = TimeSpan.FromSeconds(updatedTimerModel.TwitchTier3SubGiftTime);

        timerData.TwitchEvents.SetTwitchCheerTime = TimeSpan.FromSeconds(updatedTimerModel.TwitchCheerTime);
        timerData.TwitchEvents.SetTwitchRaidTime = TimeSpan.FromSeconds(updatedTimerModel.TwitchRaidTime);

        // Youtube
        timerData.YoutubeEvents.SetYouTubeLikeTime = TimeSpan.FromSeconds(updatedTimerModel.YouTubeLikeTime);
        timerData.YoutubeEvents.SetYouTubeSubTime = TimeSpan.FromSeconds(updatedTimerModel.YouTubeSubTime);

        // Other
        timerData.OtherEvents.SetDonationTime = TimeSpan.FromSeconds(updatedTimerModel.DonationTime);

        await SaveTimer();

        SetupTimerUpdateModel();
    }

    private async Task SaveTimer()
    {
        if (timerData is not null)
        {
            await timerConfig.UpdateTimerData(timerData);
        }
    }
}