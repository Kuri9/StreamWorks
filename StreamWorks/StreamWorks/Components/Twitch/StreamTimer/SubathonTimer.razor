@page "/twitch-tools/sub-timer"
@* @using SuperShivaUI.Components.StreamServices *@
@rendermode InteractiveServer
@attribute [Authorize(Policy = "Admin")]

@using System.Timers;
@using StreamWorks.Library.DataAccess.MongoDB.StreamWorks.Widgets.Timers
@using StreamWorks.Library.Models.Users.Twitch.Widgets.Timers
@using StreamWorks.Models.Widgets.Timers
@using TwitchLib.EventSub.Core.SubscriptionTypes.Channel
@implements IDisposable
@inherits ComponentBase

@inject ILogger<SubathonTimer> Logger
@inject IConfiguration config
@inject IStreamWorksUserData userData
@inject IStreamWorksTimerData timerConfig
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<div class="page-title">
    <h2>Subathon Timer</h2>
</div>

<div class="row m-3">
    <div class="col-9">

        <div class="row">
            <div class="col-2">
                <div class="btn-group-vertical timer-control-buttons">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="ToggleElapsedTimetAsync">Elapsed Time</Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="ToggleTotalTimeAsync">Total Time</Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="ToggleFormatTimeAsync">Format Time</Button>
                </div>
            </div>

            <div class="d-grid gap-2 col-10 mx-auto mt-2">
                <div class="row main-container">
                    
                    <div class="main-timer">
                        <div class="main-timer">
                            <h1 class="main-timer">@Time.ToString(TimeFormat)</h1>
                        </div>
                    </div>

                    <div class="row mb-2 align-content-center">
                        <div class="col d-grid gap-2">

                            <Collapse @ref="collapseElapsedTime">
                                <Card Style="timer-card">
                                    <CardBody>
                                        <div class="timer elapsed-time-timer">Elapsed Time: @TimeElapsed</div>
                                    </CardBody>
                                </Card>
                            </Collapse>
                            <Collapse @ref="collapseTotalTime">
                                <Card Style="timer-card">
                                    <CardBody>
                                        <div class="timer total-time-timer">Total Time: @TotalTime</div>
                                    </CardBody>
                                </Card>
                            </Collapse>
                            <Collapse @ref="collapseTimeFormat">
                                <Card Style="timer-card">
                                    <CardBody>
                                        <h3>Choose Format</h3>
                                        <div class="btn-group">
                                            <Button Class="btn btn-secondary" @onclick="SetTimeFormatToClock">00:00:00:00 Format</Button>
                                            <Button Class="btn btn-secondary" @onclick="SetTimeFormatToChar">00d 00h 00m 00s Format</Button>
                                        </div>
                                    </CardBody>
                                </Card>
                            </Collapse>

                            @*                     
                            <Accordion>
                            <AccordionItem>
                            <Content>
                            <h4>Elapsed Time: @TimeElapsed</h4>
                            </Content>
                            </AccordionItem>
                            <AccordionItem>
                            <Content>
                            <h5>Total Time: @TotalTime</h5>
                            </Content>
                            </AccordionItem>
                            <AccordionItem>
                            <Content>
                            <h3>Choose Format</h3>
                            <div class="btn-group">
                            <Button Class="btn btn-secondary" @onclick="SetTimeFormatToClock">00:00:00:00 Format</Button>
                            <Button Class="btn btn-secondary" @onclick="SetTimeFormatToChar">00d 00h 00m 00s Format</Button>
                            </div>
                            </Content>
                            </AccordionItem>
                            </Accordion> *@

                        </div>
                    </div>
                </div>
            </div>

            <div class="row">

            </div>
        </div>
    </div>

    @* All the buttons for controlling Timer *@
    <div class="col-3 align-content-center">
        <Accordion>
            <AccordionItem>
                <TitleTemplate>
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Gear" Class="me-1" />
                        <span>Settings</span>
                        <span>@twitchFollowEventCount</span>
                    </div>
                </TitleTemplate>
                <Content>
                        <div class="d-grid gap-2 mx-auto btn-group-vertical">
                            <button class="btn btn-dark" @onclick="StartTimer">Start</button>
                            <button class="btn btn-dark" @onclick="StopTimer">Stop</button>
                            <button class="btn btn-light" @onclick="ResetTimer">Set</button>
                            <button class="btn btn-warning" @onclick="ShowOffcanvasAsync">Edit Timer Settings</button>
                        </div>
                    </Content>
            </AccordionItem>

            <AccordionItem>
                <TitleTemplate>
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Twitch" Class="me-1" />
                        <span>Twitch Events</span>
                        <span>@twitchFollowEventCount</span>
                    </div>
                </TitleTemplate>
                <Content>
                    <div class="col-8">
                        <div class="d-grid gap-2 mx-auto">
                            <div class="input-layout-container">
                                <span class="input-layout-item-a">@twitchFollowEventCount</span>
                                <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(twitchFollowEvent))">+</button>
                                <span class="input-layout-item-c">Twitch Follow</span>
                                <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(twitchFollowEvent))">-</button>
                            </div>
                        </div>
                    </div>
                </Content>
            </AccordionItem>
            
            <AccordionItem>
                <TitleTemplate>
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Share" Class="me-1" />
                        <span>Twitch Subscriptions</span>
                        <span>Total Subscriptions: @(twitchTier1EventCount + twitchTier2EventCount + twitchTier3EventCount)</span>
                    </div>
                </TitleTemplate>
                <Content>
                    <div class="d-grid gap-2 mx-auto">
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@twitchTier1EventCount</span>
                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(twitchTier1Event))">+</button>
                            <span class="input-layout-item-c">Tier 1 Twitch Sub</span>
                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(twitchTier1Event))">-</button>
                        </div>
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@twitchTier2EventCount</span>
                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(twitchTier2Event))">+</button>
                            <span class="input-layout-item-c">Tier 2 Twitch Sub</span>
                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(twitchTier2Event))">-</button>
                        </div>
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@twitchTier3EventCount</span>
                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(twitchTier3Event))">+</button>
                            <span class="input-layout-item-c">Tier 3 Twitch Sub</span>
                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(twitchTier3Event))">-</button>
                        </div>
                    </div>
                </Content>
            </AccordionItem>

            <AccordionItem>
                <TitleTemplate>
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Gift" Class="me-1" />
                        <span>Twitch Sub Gifts</span>
                        <span>Total Sub Gift Events: @twitchSubGiftEventCount</span>
                    </div>
                </TitleTemplate>
                <Content>
                    <div class="d-grid gap-2 mx-auto">
                        <h4>Total Sub Gifts: @(twitchTotalT1SubGiftCount + twitchTotalT2SubGiftCount + twitchTotalT3SubGiftCount)</h4>

                        <InputNumber @bind-Value="SubGiftsToAdd" />
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@twitchTotalT1SubGiftCount</span>
                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(twitchTier1SubGiftEvent, SubGiftsToAdd))">+</button>
                            <span class="input-layout-item-c">Tier 1 Twitch Sub Gift</span>
                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(twitchTier1SubGiftEvent, SubGiftsToAdd))">-</button>
                        </div>
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@twitchTotalT2SubGiftCount</span>
                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(twitchTier2SubGiftEvent, SubGiftsToAdd))">+</button>
                            <span class="input-layout-item-c input-layout-item-c">Tier 2 Twitch Sub Gift</span>
                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(twitchTier2SubGiftEvent, SubGiftsToAdd))">-</button>
                        </div>
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@twitchTotalT3SubGiftCount</span>
                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(twitchTier3SubGiftEvent, SubGiftsToAdd))">+</button>
                            <span class="input-layout-item-c">Tier 3 Twitch Sub Gift</span>
                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(twitchTier3SubGiftEvent, SubGiftsToAdd))">-</button>
                        </div>
                    </div>
                </Content>
            </AccordionItem>

            <AccordionItem>
                <TitleTemplate>
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Gem" Class="me-1" />
                        <span>Twitch Cheers</span>
                        <span>Cheer Total: @twitchTotalCheerAmount</span>
                    </div>
                </TitleTemplate>
                <Content>
                    <div class="d-grid gap-2 mx-auto">
                        <InputNumber @bind-Value="BitsToAdd" />
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@twitchCheerEventCount</span>
                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(twitchCheerEvent, BitsToAdd))">+</button>
                            <span class="input-layout-item-c">Twitch Cheer</span>
                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(twitchCheerEvent, BitsToAdd))">-</button>
                        </div>
                    </div>
                </Content>
            </AccordionItem>

            <AccordionItem>
                <TitleTemplate>
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Youtube" Class="me-1" />
                        <span>Youtube Events</span>
                        <span>Youtube Total: @(youtubeLikeEventCount + youtubeSubEventCount)</span>
                    </div>
                </TitleTemplate>
                <Content>
                    <div class="d-grid gap-2 mx-auto">
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@youtubeLikeEventCount</span>
                            <button class="input-layout-item-b btn btn-danger" @onclick="(() => AddTimeYoutube(youTubeLikeEvent))">+</button>
                            <span class="input-layout-item-c">Youtube Like</span>
                            <button class="input-layout-item-d btn btn-danger" @onclick="(() => RemoveTimeYoutube(youTubeLikeEvent))">-</button>
                        </div>
                        <div class="input-layout-container">
                            <span class="input-layout-item-a">@youtubeSubEventCount</span>
                            <button class="input-layout-item-b btn btn-danger" @onclick="(() => AddTimeYoutube(youTubeSubEvent))">+</button>
                            <span class="input-layout-item-c">Youtube Subscribe</span>
                            <button class="input-layout-item-d btn btn-danger" @onclick="(() => RemoveTimeYoutube(youTubeSubEvent))">-</button>
                        </div>
                    </div>
                </Content>
            </AccordionItem>
        </Accordion>
    </div>
</div>

<Offcanvas @ref="timerEditOffcanvas" Placement="Placement.End">
    <HeaderTemplate>
        <h5 class="offcanvas-title" id="offcanvasTimerData">Edit Timer Times</h5>
    </HeaderTemplate>
    <BodyTemplate>
        <div>
            Edit timer data here. All times are in <strong>seconds</strong>!
        </div>
        <div class="mb-3">

            <EditForm Model="updatedTimerModel" OnSubmit="UpdateTimer">
                <div class="form-group">
                    <label class="form-control" for="startingTime">Set Starting Time</label>
                    <InputNumber id="startingTime" class="form-control" @bind-Value="updatedTimerModel.StartingTime" />

                    <label class="form-control" for="totalCount">Show Total Counts?</label>
                    <InputCheckbox id="totalCount" class="form-control" @bind-Value="updatedTimerModel.ShowTotalCounts" />
                </div>

                <div class="form-group">
                    <label class="form-control" for="twitchFollowTime">Time Per Twitch Follow</label>
                    <InputNumber id="twitchFollowTime" class="form-control" @bind-Value="updatedTimerModel.TwitchFollowTime" />
                </div>

                <div class="form-group">
                    <label class="form-control" for="twitchTier1Time">Time Per Twitch Tier 1 Sub</label>
                    <InputNumber id="twitchTier1Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier1Time" />

                    <label class="form-control" for="twitchTier2Time">Time Per Twitch Tier 2 Sub</label>
                    <InputNumber id="twitchTier2Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier2Time" />

                    <label class="form-control" for="twitchTier3Time">Time Per Twitch Tier 3 Sub</label>
                    <InputNumber id="twitchTier3Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier3Time" />
                </div>

                <div class="form-group">
                    <label class="form-control" for="twitchTier1GiftTime">Time Per Twitch Tier 1 Gift Sub</label>
                    <InputNumber id="twitchTier1GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier1SubGiftTime" />

                    <label class="form-control" for="twitchTier2GiftTime">Time Per Twitch Tier 2 Gift Sub</label>
                    <InputNumber id="twitchTier2GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier2SubGiftTime" />

                    <label class="form-control" for="twitchTier3GiftTime">Time Per Twitch Tier 3 Gift Sub</label>
                    <InputNumber id="twitchTier3GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier3SubGiftTime" />
                </div>

                <div class="form-group">
                    <label class="form-control" for="twitchCheerTime">Time Per Twitch Cheer: (1 Bit)</label>
                    <InputNumber id="twitchCheerTime" class="form-control" @bind-Value="updatedTimerModel.TwitchCheerTime" />
                </div>

                <div class="form-group">
                    <label class="form-control" for="youtubeLikeTime">Time Per Youtube Like</label>
                    <InputNumber id="youtubeLikeTime" class="form-control" @bind-Value="updatedTimerModel.YouTubeLikeTime" />

                    <label class="form-control" for="youtubeSubTime">Time Per Youtube Subscribe</label>
                    <InputNumber id="youtubeSubTime" class="form-control" @bind-Value="updatedTimerModel.YouTubeSubTime" />
                </div>

                <button class="btn btn-outline-primary mt-3" action="submit" @onclick="HideOffcanvasAsync">Update Timer</button>
            </EditForm>
        </div>
    </BodyTemplate>
</Offcanvas>

@code {
    private StreamWorksUserModel loggedInUser = default!;

    //TODO
    //Set Start Time
    //Remove Time
    //Set base values for all the times
    //Save the data
    private HubConnection? twitchHub;
    private List<StreamTimerModel>? allTimerData;
    private StreamTimerModel? timerData;
    private CreateStreamTimerModel updatedTimerModel = new();

    // Layout Items
    private Offcanvas? timerEditOffcanvas;
    private Collapse collapseElapsedTime = default!;
    private Collapse collapseTotalTime = default!;
    private Collapse collapseTimeFormat = default!;

    private Timer _timer = null!;
    // Total time in seconds left for the timer to run, 
    // Add or delete from here to update timer
    private double secondsToRun = 0;

    private double startingTime = 300;
    private TimeSpan currentTime;

    private double defaultTime = 300;
    private string? lastSystemMessage;
    private int tickCount = 0;
    private bool firstRun;
    private double addTime = 0;
    private int SubGiftsToAdd = 0;
    private int BitsToAdd = 0;

    private string? TimeFormat = @"dd\:hh\:mm\:ss";
    private string? TimeNumFormat = @"dd\:hh\:mm\:ss";
    private string? TimeCharFormat = @"d'd 'h'h 'm'm 's's'";

    private string? CurrentTimeDisplayFormat;
    //private string? TimeWordFormat = $"{timeSpan.Days} days, {timeSpan.Hours} hours, {timeSpan.Minutes} minutes, {timeSpan.Seconds} seconds";

    // Twitch
    private string twitchFollowEvent = "TwitchFollow";
    private int twitchFollowEventCount;
    private double twitchFollowTime;

    private string twitchTier1Event = "TwitchTier1";
    private int twitchTier1EventCount;
    private double twitchTier1Time;

    private string twitchTier2Event = "TwitchTier2";
    private int twitchTier2EventCount;
    private double twitchTier2Time;

    private string twitchTier3Event = "TwitchTier3";
    private int twitchTier3EventCount;
    private double twitchTier3Time;

    // Sub Gifts
    private string twitchSubGiftEvent = "TwitchSubGift";
    private int twitchSubGiftEventCount;
    private int twitchTotalSubGiftCount;

    private string twitchTier1SubGiftEvent = "TwitchTier1SubGift";
    private int twitchTotalT1SubGiftCount;
    private double twitchTier1SubGiftTime;

    private string twitchTier2SubGiftEvent = "TwitchTier2SubGift";
    private int twitchTotalT2SubGiftCount;
    private double twitchTier2SubGiftTime;

    private string twitchTier3SubGiftEvent = "TwitchTier3SubGift";
    private int twitchTotalT3SubGiftCount;
    private double twitchTier3SubGiftTime;

    // Cheers
    private string twitchCheerEvent = "TwitchCheer";
    private int twitchCheerEventCount;
    private double twitchCheerTime;
    private int twitchTotalCheerAmount = 0;

    // Youtube
    private string youTubeLikeEvent = "YoutubeLike";
    private int youtubeLikeEventCount;
    private double youTubeLikeTime;
    private string youTubeSubEvent = "YoutubeSubscribe";
    private int youtubeSubEventCount;
    private double youTubeSubTime;

    protected TimeSpan Time { get; set; }
    protected TimeSpan TotalTime { get; set; }

    protected TimeSpan TimeLeft { get; set; }
    protected TimeSpan TimeElapsed { get; set; }

    protected TimeSpan LastSetTime { get; set; }

    [Parameter]
    public EventCallback TimerEnded { get; set; }

    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        twitchHub = new HubConnectionBuilder()
        .WithUrl(navManager.ToAbsoluteUri("/twitchhub"))
        .WithAutomaticReconnect()
        .Build();

        twitchHub.On<ChannelChatMessage>("ChatMessageReceived", (message) =>
        {
            Logger.LogInformation($"Message Received: {message.Message.Text}");
            if (message.Message.Text == "!timer 5")
            {
                AddTimeTwitch(500);
            }
        });

        twitchHub.On<ChannelFollow>("GetFollows", (follow) =>
        {
            Logger.LogInformation($"Follow Received: {follow.UserName} followed {follow.BroadcasterUserName}");
            if (follow is not null)
            {
                AddTimeTwitch(twitchFollowEvent);
            }
        });

        twitchHub.On<ChannelSubscribe>("GetSubscribedEvents", (subscription) =>
        {
            Logger.LogInformation($"Message Received: {subscription.UserName} sent a Tier {subscription.Tier.ToString()} Sub");

            if (subscription is not null && subscription.IsGift == false)
            {
                if (subscription.Tier == "1000")
                {
                    AddTimeTwitch(twitchTier1Event);
                }
                else if (subscription.Tier == "2000")
                {
                    AddTimeTwitch(twitchTier2Event);
                }
                else if (subscription.Tier == "3000")
                {
                    AddTimeTwitch(twitchTier3Event);
                }
            }
        });

        twitchHub.On<ChannelSubscriptionGift>("GetSubscriptionGifts", (subGift) =>
        {
            Logger.LogInformation($"Message Received: {subGift.UserName} sent {subGift.Total} {subGift.Tier} Sub Gift(s)");
            if (subGift is not null)
            {
                if (subGift.Tier == "1000")
                {
                    AddTimeWithAmountTwitch(twitchTier1SubGiftEvent, subGift.Total);
                }
                else if (subGift.Tier == "2000")
                {
                    AddTimeWithAmountTwitch(twitchTier2SubGiftEvent, subGift.Total);
                }
                else if (subGift.Tier == "3000")
                {
                    AddTimeWithAmountTwitch(twitchTier3SubGiftEvent, subGift.Total);
                }
            }
        });

        twitchHub.On<ChannelCheer>("GetCheers", (cheer) =>
        {
            Logger.LogInformation($"Message Received: {cheer.UserName} cheered {cheer.Bits} Bits");
            if (cheer is not null && cheer.Bits > 0)
            {
                AddTimeWithAmountTwitch(twitchCheerEvent, cheer.Bits);
            }

        });

        // twitchHub.On<int>("Tick", newTime =>
        // {
        //     currentTime = newTime;
        //     tickCount += 1;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<int, string>("TimerSet", (time, message) =>
        // {
        //     currentTime = time;
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<string>("TimerStarted", message =>
        // {
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<string>("TimerStopped", message =>
        // {
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        await twitchHub.StartAsync();

        // Set Timer
        _timer = new Timer(1000);
        _timer.Elapsed += OnTickEvent;
        _timer.AutoReset = true;

        // Initialize Timer
        await InitializeTimer();
    }

    private async Task ShowOffcanvasAsync()
    {
        await timerEditOffcanvas?.ShowAsync();
    }

    private async Task HideOffcanvasAsync()
    {
        await timerEditOffcanvas?.HideAsync();
    }

    private async Task ToggleElapsedTimetAsync() => await collapseElapsedTime.ToggleAsync();
    private async Task ToggleTotalTimeAsync() => await collapseTotalTime.ToggleAsync();
    private async Task ToggleFormatTimeAsync() => await collapseTimeFormat.ToggleAsync();

    public async Task InitializeTimer()
    {
        ErrorMessage = "";

        // TODO: Select timer from a list +  Create a new timer button
        var result = await timerConfig.GetTimerDataByUserId(loggedInUser.Id);

        // Initialize New Timer Data if no timers are found for the user
        if (result is null || result.Count() < 1)
        {
            timerData = new();
            timerData.UserId = loggedInUser.Id;
            timerData.CurrentTime = TimeSpan.FromSeconds(0);
            timerData.TimerTitle = "Default Title";
            await CreateTimer();
        }
        else
        {
            // Fill in with first timer found
            timerData = result.FirstOrDefault();
        }

        UpdateTimerSettings(true);
    }

    public TimeSpan SetTime()
    {
        return TimeSpan.FromSeconds(secondsToRun);
    }

    public void SetTimeFormatToClock()
    {
        TimeFormat = TimeNumFormat;
        InvokeAsync(StateHasChanged);
    }

    public void SetTimeFormatToChar()
    {
        TimeFormat = TimeCharFormat;
        InvokeAsync(StateHasChanged);
    }

    public void StartTimer()
    {
        ErrorMessage = "";

        if (firstRun)
        {
            secondsToRun = startingTime;

            Time = SetTime();
            TotalTime = SetTime();
            TimeElapsed = TimeSpan.FromSeconds(0);

            firstRun = false;
        }

        if (secondsToRun > 0)
        {
            Time = SetTime();
            StateHasChanged();
            _timer.Start();
        }
    }

    public void StopTimer()
    {
        _timer.Stop();
    }

    public void UpdateTimerSettings(bool fullUpdate = false)
    {
        if (timerData is null)
        {
            ErrorMessage = "Could not load Timer settings. Timer Data is null";
            Logger.LogError("Timer Data is null");
            return;
        }
        startingTime = timerData.StartingTime;
        updatedTimerModel.StartingTime = timerData.StartingTime;
        updatedTimerModel.ShowTotalCounts = timerData.ShowTotalCounts;

        // Twitch: Set Timer Data from Model
        twitchFollowTime = timerData.TwitchFollowTime;
        twitchTier1Time = timerData.TwitchTier1Time;
        twitchTier2Time = timerData.TwitchTier2Time;
        twitchTier3Time = timerData.TwitchTier3Time;

        twitchTier1SubGiftTime = timerData.TwitchTier1SubGiftTime;
        twitchTier2SubGiftTime = timerData.TwitchTier2SubGiftTime;
        twitchTier3SubGiftTime = timerData.TwitchTier3SubGiftTime;

        twitchCheerTime = timerData.TwitchCheerTime;

        // Twitch: Set Data in Update Model
        updatedTimerModel.TwitchFollowTime = timerData.TwitchFollowTime;
        updatedTimerModel.TwitchTier1Time = timerData.TwitchTier1Time;
        updatedTimerModel.TwitchTier2Time = timerData.TwitchTier2Time;
        updatedTimerModel.TwitchTier3Time = timerData.TwitchTier3Time;

        updatedTimerModel.TwitchTier1SubGiftTime = timerData.TwitchTier1SubGiftTime;
        updatedTimerModel.TwitchTier2SubGiftTime = timerData.TwitchTier2SubGiftTime;
        updatedTimerModel.TwitchTier3SubGiftTime = timerData.TwitchTier3SubGiftTime;

        updatedTimerModel.TwitchCheerTime = timerData.TwitchCheerTime;

        // Youtube
        youTubeLikeTime = timerData.YouTubeLikeTime;
        youTubeSubTime = timerData.YouTubeSubTime;

        updatedTimerModel.YouTubeLikeTime = timerData.YouTubeLikeTime;
        updatedTimerModel.YouTubeSubTime = timerData.YouTubeSubTime;

        if (fullUpdate)
        {
            Time = timerData.CurrentTime;

            if (timerData.ShowTotalCounts == true)
            {
                // Set all the counts and Data based on the chosen Timer Data
                twitchFollowEventCount = timerData.TotalTwitchFollowEventCount;
                twitchTier1EventCount = timerData.TotalTwitchTier1EventCount;
                twitchTier2EventCount = timerData.TotalTwitchTier2EventCount;
                twitchTier3EventCount = timerData.TotalTwitchTier3EventCount;

                twitchSubGiftEventCount = timerData.TwitchSubGiftEventCount;
                twitchTotalSubGiftCount = timerData.TwitchTotalSubGiftCount;
                twitchTotalT1SubGiftCount = timerData.TwitchTotalT1SubGiftCount;
                twitchTotalT2SubGiftCount = timerData.TwitchTotalT2SubGiftCount;
                twitchTotalT3SubGiftCount = timerData.TwitchTotalT3SubGiftCount;

                twitchCheerEventCount = timerData.TwitchCheerEventCount;
                twitchTotalCheerAmount = timerData.TwitchTotalCheerAmount;

                youtubeLikeEventCount = timerData.TotalYoutubeLikeEventCount;
                youtubeSubEventCount = timerData.TotalYoutubeSubEventCount;
            }
            else
            {
                // If no Existing Timer Data exists, set all to 0
                twitchFollowEventCount = 0;
                twitchTier1EventCount = 0;
                twitchTier2EventCount = 0;
                twitchTier3EventCount = 0;

                twitchSubGiftEventCount = 0;
                twitchTotalSubGiftCount = 0;
                twitchTotalT1SubGiftCount = 0;
                twitchTotalT2SubGiftCount = 0;
                twitchTotalT3SubGiftCount = 0;

                twitchCheerEventCount = 0;

                youtubeLikeEventCount = 0;
                youtubeSubEventCount = 0;
            }

            if (timerData.IsCompleted == true || timerData.IsRunning == true || timerData.CurrentTime.TotalSeconds <= 0)
            {
                secondsToRun = startingTime;
                Time = SetTime();
                TotalTime = SetTime();
                StateHasChanged();
            }
            else
            {
                secondsToRun = currentTime.TotalSeconds;
                Time = SetTime();
                TotalTime = SetTime();
                StateHasChanged();
            }

        }
    }

    public void ResetTimer()
    {
        ErrorMessage = "";

        _timer.Stop();

        secondsToRun = startingTime;

        Time = SetTime();
        TotalTime = SetTime();
        TimeElapsed = TimeSpan.FromSeconds(0);

        StateHasChanged();
    }

    private async void OnTickEvent(object? sender, ElapsedEventArgs e)
    {
        secondsToRun--;

        await InvokeAsync(() =>
        {
            Time = SetTime();
            TimeElapsed = TotalTime - Time;

            StateHasChanged();
        });

        if (secondsToRun <= 0)
        {
            _timer.Stop();
            await TimerEnded.InvokeAsync();
        }
    }

    public void Dispose()
    {
        if (_timer is not null)
        {
            _timer.Dispose();
        }
    }

    public void AddTimeTwitch(string twitchEvent)
    {
        if(twitchEvent == twitchFollowEvent)
        {
            twitchFollowEventCount++;
            addTime = twitchFollowTime;
        }
        else if(twitchEvent == twitchTier1Event)
        {
            twitchTier1EventCount++;
            addTime = twitchTier1Time;
        }
        else if(twitchEvent == twitchTier2Event)
        {
            twitchTier2EventCount++;
            addTime = twitchTier2Time;
        }
        else if(twitchEvent == twitchTier3Event)
        {
            twitchTier3EventCount++;
            addTime = twitchTier3Time;
        }
        else if (addTime < 0)
        {
            addTime *= -1;
        }
        else
        {
            Logger.LogError("Could not find Twitch Event");
        }

        secondsToRun += addTime;
        Time = SetTime();
        TotalTime += TimeSpan.FromSeconds(addTime);
        InvokeAsync(StateHasChanged);
    }

    public void AddTimeWithAmountTwitch(string twitchEvent, int amount = 0)
    {
        if (twitchEvent == twitchTier1SubGiftEvent)
        {
            twitchSubGiftEventCount++;
            twitchTotalSubGiftCount += amount;
            twitchTotalT1SubGiftCount += amount;
            addTime = twitchTier1SubGiftTime * amount;
        }
        else if (twitchEvent == twitchTier2SubGiftEvent)
        {
            twitchSubGiftEventCount++;
            twitchTotalSubGiftCount += amount;
            twitchTotalT2SubGiftCount += amount;
            addTime = twitchTier2SubGiftTime * amount;
        }
        else if (twitchEvent == twitchTier3SubGiftEvent)
        {
            twitchSubGiftEventCount++;
            twitchTotalSubGiftCount += amount;
            twitchTotalT3SubGiftCount += amount;
            addTime = twitchTier3SubGiftTime * amount;
        }
        else if (twitchEvent == twitchCheerEvent)
        {
            twitchCheerEventCount++;
            twitchTotalCheerAmount += amount;
            addTime = twitchCheerTime * amount;
        }
        else
        {
            Logger.LogError("Could not find Twitch Event");
        }

        if (addTime < 0)
        {
            addTime *= -1;
        }

        secondsToRun += addTime;
        Time = SetTime();
        TotalTime += TimeSpan.FromSeconds(addTime);
        InvokeAsync(StateHasChanged);
    }

    public void AddTimeTwitch(int time)
    {
        addTime = time;
        secondsToRun += addTime;
        Time = SetTime();
        TotalTime += TimeSpan.FromSeconds(addTime);
        InvokeAsync(StateHasChanged);
    }

    public void RemoveTimeTwitch(string twitchEvent)
    {
        if (twitchEvent == twitchFollowEvent)
        {
            twitchFollowEventCount--;
            addTime = twitchFollowTime;
        }
        else if (twitchEvent == twitchTier1Event)
        {
            twitchTier1EventCount--;
            addTime = twitchTier1Time;
        }
        else if (twitchEvent == twitchTier2Event)
        {
            twitchTier2EventCount--;
            addTime = twitchTier2Time;
        }
        else if (twitchEvent == twitchTier3Event)
        {
            twitchTier3EventCount--;
            addTime = twitchTier3Time;
        }
        else
        {
            Logger.LogError("Could not find Twitch Event");
        }

        if (addTime < 0)
        {
            addTime *= -1;
        }

        secondsToRun -= addTime;
        Time = SetTime();
        TotalTime -= TimeSpan.FromSeconds(addTime);
        InvokeAsync(StateHasChanged);
    }

    public void RemoveTimeWithAmountTwitch(string twitchEvent, int amount = 0)
    {
        if (twitchEvent == twitchTier1SubGiftEvent)
        {
            twitchSubGiftEventCount--;
            twitchTotalSubGiftCount -= amount;
            twitchTotalT1SubGiftCount -= amount;
            addTime = (twitchTier1SubGiftTime * amount);
        }
        else if (twitchEvent == twitchTier2SubGiftEvent)
        {
            twitchSubGiftEventCount--;
            twitchTotalSubGiftCount -= amount;
            twitchTotalT2SubGiftCount -= amount;
            addTime = (twitchTier2SubGiftTime * amount);
        }
        else if (twitchEvent == twitchTier3SubGiftEvent)
        {
            twitchSubGiftEventCount--;
            twitchTotalSubGiftCount -= amount;
            twitchTotalT3SubGiftCount -= amount;
            addTime = (twitchTier3SubGiftTime * amount);
        }
        else if (twitchEvent == twitchCheerEvent)
        {
            twitchCheerEventCount--;
            twitchTotalCheerAmount -= amount;
            addTime = (twitchCheerTime * amount);
        }
        else
        {
            Logger.LogError("Could not find Twitch Event");
        }

        if (addTime <0)
        {
            addTime *= -1;
        }

        secondsToRun -= addTime;
        Time = SetTime();
        TotalTime -= TimeSpan.FromSeconds(addTime);
        InvokeAsync(StateHasChanged);
    }

    public void AddTimeYoutube(string youtubeEvent)
    {
        switch (youtubeEvent)
        {
            case "YoutubeLike":
                youtubeLikeEventCount++;
                addTime = youTubeLikeTime;
                break;

            case "YoutubeSubscribe":
                youtubeSubEventCount++;
                addTime = youTubeSubTime;
                break;

            default:
                addTime = defaultTime;
                break;
        }

        secondsToRun += addTime;
        Time = SetTime();
        TotalTime += TimeSpan.FromSeconds(addTime);
        StateHasChanged();
    }

    public void RemoveTimeYoutube(string youtubeEvent)
    {
        switch (youtubeEvent)
        {
            case "YoutubeLike":
                youtubeLikeEventCount--;
                addTime = -(youTubeLikeTime);
                break;

            case "YoutubeSubscribe":
                youtubeSubEventCount--;
                addTime = -(youTubeSubTime);
                break;

            default:
                addTime = -(defaultTime);
                break;
        }

        secondsToRun += addTime;
        Time = SetTime();
        TotalTime += TimeSpan.FromSeconds(addTime);
        StateHasChanged();
    }

    public async Task SetHubTimer()
    {
        // currentTime = startTime;
        // streamTimer.SetTimer(1000);
        // streamTimer.OnTick += TickHandler;
        if (twitchHub is not null)
        {
            await twitchHub.SendAsync("SetTimer");
        }
    }

    public async Task StartHubTimer()
    {
        //streamTimer.StartTimer();
        if (twitchHub is not null)
        {
            await twitchHub.SendAsync("StartTimer");
        }
    }

    private void TickHandler()
    {
        //currentTime -= 1000;
        tickCount += 1;
        InvokeAsync(StateHasChanged);
    }

    private void TimerEndedCallback()
    {
        Logger.LogInformation("Timer Ended");
    }

    private async Task CreateTimer()
    {
        if (timerData is null)
        {
            ErrorMessage = "Could not create Timer. Timer Data is null";
            Logger.LogError("Timer Data is null");
            return;
        }
        await timerConfig.CreateTimerData(timerData);
    }

    private async Task UpdateTimer()
    {
        if (timerData is null)
        {
            ErrorMessage = "Could not update Timer. Timer Data is null";
            Logger.LogError("Timer Data is null");
            return;
        }
        timerData.StartingTime = updatedTimerModel.StartingTime;
        timerData.ShowTotalCounts = updatedTimerModel.ShowTotalCounts;
        timerData.CurrentTime = Time;
        timerData.TotalTime = TotalTime;

        // Twitch
        timerData.TwitchFollowTime = updatedTimerModel.TwitchFollowTime;
        timerData.TwitchTier1Time = updatedTimerModel.TwitchTier1Time;
        timerData.TwitchTier2Time = updatedTimerModel.TwitchTier2Time;
        timerData.TwitchTier3Time = updatedTimerModel.TwitchTier3Time;

        timerData.TwitchTier1SubGiftTime = updatedTimerModel.TwitchTier1SubGiftTime;
        timerData.TwitchTier2SubGiftTime = updatedTimerModel.TwitchTier2SubGiftTime;
        timerData.TwitchTier3SubGiftTime = updatedTimerModel.TwitchTier3SubGiftTime;

        timerData.TwitchCheerTime = updatedTimerModel.TwitchCheerTime;

        // Youtube
        timerData.YouTubeLikeTime = updatedTimerModel.YouTubeLikeTime;
        timerData.YouTubeSubTime = updatedTimerModel.YouTubeSubTime;

        await SaveTimer();

        UpdateTimerSettings();
    }

    private async Task SaveTimer()
    {
        if (timerData is not null)
        {
            await timerConfig.UpdateTimerData(timerData);
        }
    }
}