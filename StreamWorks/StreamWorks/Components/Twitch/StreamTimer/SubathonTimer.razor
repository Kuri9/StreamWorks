@page "/twitch-tools/sub-timer"
@* @using SuperShivaUI.Components.StreamServices *@
@rendermode InteractiveServer
@attribute [Authorize]

@using System.Timers;
@using StreamWorks.Library.DataAccess.MongoDB.StreamWorks.Widgets.Timers
@using StreamWorks.Library.Models.Widgets.Timers
@using StreamWorks.Models.Widgets.Timers
@using TwitchLib.EventSub.Core.SubscriptionTypes.Channel
@implements IDisposable
@inherits ComponentBase

@inject ILogger<SubathonTimer> Logger
@inject IConfiguration config
@inject IStreamWorksUserData userData
@inject IStreamWorksTimerData timerConfig
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<div class="page-title">
    <h2>Subathon Timer</h2>
</div>

<div class="row m-3">

    @* Main Column Here *@
    <div class="col-12">
        <div class="row">

            @* This is the start of the left column *@
            <div class="col-3">

                <div class="row mb-3">
                    <div class="d-grid button-connected-group">
                        <Button Class="btn btn-lg btn-dark" Disabled="@startIsDisabled" data-bs-toggle="button" @onclick="StartTimer">Start</Button>
                        <Button Class="btn btn-lg btn-dark" Disabled="@startIsDisabled" data-bs-toggle="button" @onclick="StopTimer">Stop</Button>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Gear" Class="me-1" />
                        <span>Settings</span>
                    </div>
                    <div class="d-grid button-connected-group">
                        <button class="btn btn-light" @onclick="ResetTimer">Set</button>
                        <button class="btn btn-warning" @onclick="ShowOffcanvasAsync">Edit Timer Settings</button>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Clock" Class="me-1" />
                        <span>Show Timers</span>
                    </div>
                    <div class="d-grid button-connected-group">
                        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Active="isShowElapsed" @onclick="ToggleElapsedTimetAsync">Elapsed Time</Button>
                        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Active="isShowTotal" @onclick="ToggleTotalTimeAsync">Total Time</Button>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="timer-accordian-title">
                        <Icon Name="IconName.Calendar" Class="me-1" />
                        <span>Time Format</span>
                    </div>
                    <div class="d-grid button-connected-group">
                        <Button Class="btn btn-secondary" Active="isTimeFormat" @onclick="SetTimeFormatToClock">00:00:00:00 Format</Button>
                        <Button Class="btn btn-secondary" Active="isDateFormat" @onclick="SetTimeFormatToChar">00d 00h 00m 00s Format</Button>
                    </div>
                </div>

            </div>

            @* This is the start of the middle column *@
            <div class="d-grid col-9 mx-auto mt-2">
                <div class="row main-container">
                    
                    <div class="main-timer">
                        <div class="main-timer">
                            @if (timerData is not null) 
                            {
                                if (timerData.IsCompleted == true)
                                {
                                    <h1>Countdown Completed!</h1>
                                }
                                else
                                {
                                    <h1 class="main-timer">@TimeLeft.ToString(TimeFormat)</h1>
                                }
                            }
                            else 
                            {
                                <h2>Loading Timer...</h2>
                            }
                        </div>
                    </div>

                    <div class="row mb-2 align-content-center">
                        <div class="col d-grid gap-2">
                            <Collapse @ref="collapseElapsedTime">
                                <Card Style="timer-card">
                                    <CardBody>
                                        <div class="sub-timer elapsed-time-timer">@TimeElapsed</div>
                                        <span class="timer-sub-label">Elapsed Time</span>
                                    </CardBody>
                                </Card>
                            </Collapse>
                            <Collapse @ref="collapseTotalTime">
                                <Card Style="timer-card">
                                    <CardBody>
                                        @if (timerData is not null)
                                        {
                                            <div class="sub-timer total-time-timer">@timerData.TotalTime</div>
                                            <span class="timer-sub-label">Total Time</span>
                                        }
                                        else
                                        {
                                            <div class="timer total-time-timer">00: 00: 00: 00</div>
                                            <span class="timer-sub-label">Total Time</span>
                                        }
                                    </CardBody>
                                </Card>
                            </Collapse>
                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>
</div>

<div class="row m-2">
    <Accordion title="Set Counts">
        <AccordionItem>
            <Content>
                <div class="container-fluid">
                    @if (timerData is not null)
                    {
                        <div class="row">

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Twitch" Class="me-1" />
                                        <span>Twitch Events</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="col-8">
                                        <div class="d-grid gap-2 mx-auto">
                                            <div class="input-layout-container">
                                                <span class="input-layout-item-a">@timerData.TwitchFollowEventCount</span>
                                                <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(timerData.TwitchFollowEvent))">+</button>
                                                <span class="input-layout-item-c">Follow</span>
                                                <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(timerData.TwitchFollowEvent))">-</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Share" Class="me-1" />
                                        <span>Twitch Subscriptions</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.TwitchTier1EventCount</span>
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(timerData.TwitchTier1Event))">+</button>
                                            <span class="input-layout-item-c">Tier 1</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(timerData.TwitchTier1Event))">-</button>
                                        </div>
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.TwitchTier2EventCount</span>
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(timerData.TwitchTier2Event))">+</button>
                                            <span class="input-layout-item-c">Tier 2</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(timerData.TwitchTier2Event))">-</button>
                                        </div>
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.TwitchTier3EventCount</span>
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeTwitch(timerData.TwitchTier3Event))">+</button>
                                            <span class="input-layout-item-c">Tier 3</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeTwitch(timerData.TwitchTier3Event))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Gift" Class="me-1" />
                                        <span>Twitch Sub Gifts</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="SubGiftsToAdd" />
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.TwitchTotalT1SubGiftCount</span>
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchTier1SubGiftEvent, SubGiftsToAdd))">+</button>
                                            <span class="input-layout-item-c">Tier 1</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchTier1SubGiftEvent, SubGiftsToAdd))">-</button>
                                        </div>
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.TwitchTotalT2SubGiftCount</span>
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchTier2SubGiftEvent, SubGiftsToAdd))">+</button>
                                            <span class="input-layout-item-c input-layout-item-c">Tier 2</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchTier2SubGiftEvent, SubGiftsToAdd))">-</button>
                                        </div>
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.TwitchTotalT3SubGiftCount</span>
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchTier3SubGiftEvent, SubGiftsToAdd))">+</button>
                                            <span class="input-layout-item-c">Tier 3</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchTier3SubGiftEvent, SubGiftsToAdd))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Gem" Class="me-1" />
                                        <span>Twitch Cheers</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="BitsToAdd" />
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.TwitchCheerEventCount</span>
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchCheerEvent, BitsToAdd))">+</button>
                                            <span class="input-layout-item-c">Cheer</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchCheerEvent, BitsToAdd))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.People" Class="me-1" />
                                        <span>Twitch Raid</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="RaidCount" />
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.TwitchRaidEventCount</span>
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTimeWithAmountTwitch(timerData.TwitchRaidEvent, RaidCount))">+</button>
                                            <span class="input-layout-item-c">Raid</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTimeWithAmountTwitch(timerData.TwitchRaidEvent, RaidCount))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Youtube" Class="me-1" />
                                        <span>Youtube Events</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.YoutubeLikeEventCount</span>
                                            <button class="input-layout-item-b btn btn-danger" @onclick="(() => AddTimeYoutube(timerData.YouTubeLikeEvent))">+</button>
                                            <span class="input-layout-item-c">Like</span>
                                            <button class="input-layout-item-d btn btn-danger" @onclick="(() => RemoveTimeYoutube(timerData.YouTubeLikeEvent))">-</button>
                                        </div>
                                        <div class="input-layout-container">
                                            <span class="input-layout-item-a">@timerData.YoutubeSubEventCount</span>
                                            <button class="input-layout-item-b btn btn-danger" @onclick="(() => AddTimeYoutube(timerData.YouTubeSubEvent))">+</button>
                                            <span class="input-layout-item-c">Subscribe</span>
                                            <button class="input-layout-item-d btn btn-danger" @onclick="(() => RemoveTimeYoutube(timerData.YouTubeSubEvent))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col">
                                <div>
                                    <div class="timer-accordian-title">
                                        <Icon Name="IconName.Play" Class="me-1" />
                                        <span>Add Time</span>
                                    </div>
                                </div>
                                <div>
                                    <div class="d-grid gap-2 mx-auto">
                                        <InputNumber @bind-Value="AddExtraTime" />
                                        <div class="input-layout-container">
                                            <button class="input-layout-item-b btn btn-primary" @onclick="(() => AddTime(AddExtraTime))">+</button>
                                            <span class="input-layout-item-c">Time</span>
                                            <button class="input-layout-item-d btn btn-primary" @onclick="(() => RemoveTime(AddExtraTime))">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    }
                    else
                    {
                        <h2>Loading Tools...</h2>
                    }
                </div>
            </Content>
        </AccordionItem>
    </Accordion>
</div>
   
<Offcanvas @ref="timerEditOffcanvas" Placement="Placement.End">
    <HeaderTemplate>
        <h4 class="offcanvas-title" id="offcanvasTimerData">Edit Timer Times</h4>
    </HeaderTemplate>
    <BodyTemplate>
        <div>
            Edit timer data here. All times are in <strong>seconds</strong>!
        </div>
        <div class="timer-setting-form mb-2">
            <EditForm Model="updatedTimerModel" OnSubmit="UpdateTimer">
                <div class="form-group mb-2">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="startingTime">Set Starting Time</label>
                        <InputNumber id="startingTime" class="form-control" @bind-Value="updatedTimerModel.StartingTime" />
                    </div>

                    <div class="col-auto input-group form-check-inline form-switch mb-2">
                        <label class="input-group-text" for="totalCount">Show Total Counts?</label>
                        <InputCheckbox id="totalCount" class="form-check-input" type="checkbox" @bind-Value="updatedTimerModel.ShowTotalCounts" />
                    </div>
                </div>

                <h5>Twitch Events</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchFollowTime">Twitch Follow</label>
                        <InputNumber id="twitchFollowTime" class="form-control" @bind-Value="updatedTimerModel.TwitchFollowTime" />
                    </div>
                </div>

                <h5>Twitch Subscriptions</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier1Time">Twitch Tier 1 Sub</label>
                        <InputNumber id="twitchTier1Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier1Time" />
                    </div>
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier2Time">Twitch Tier 2 Sub</label>
                        <InputNumber id="twitchTier2Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier2Time" />
                    </div>
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier3Time">Twitch Tier 3 Sub</label>
                        <InputNumber id="twitchTier3Time" class="form-control" @bind-Value="updatedTimerModel.TwitchTier3Time" />
                    </div>
                </div>

                <h5>Twitch Sub Gifts</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier1GiftTime">Twitch Tier 1 Gift Sub</label>
                        <InputNumber id="twitchTier1GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier1SubGiftTime" />
                    </div>

                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier2GiftTime">Twitch Tier 2 Gift Sub</label>
                        <InputNumber id="twitchTier2GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier2SubGiftTime" />
                    </div>
                    
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchTier3GiftTime">Twitch Tier 3 Gift Sub</label>
                        <InputNumber id="twitchTier3GiftTime" class="form-control" @bind-Value="updatedTimerModel.TwitchTier3SubGiftTime" />
                    </div>
                </div>

                <h5>Twitch Cheers</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchCheerTime">Twitch Cheer: (1 Bit)</label>
                        <InputNumber id="twitchCheerTime" class="form-control" @bind-Value="updatedTimerModel.TwitchCheerTime" />
                    </div>
                </div>

                <h5>Twitch Raids</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="twitchRaidTime">Twitch Cheer: (1 Bit)</label>
                        <InputNumber id="twitchRaidTime" class="form-control" @bind-Value="updatedTimerModel.TwitchRaidTime" />
                    </div>
                </div>

                <h5>Youtube Events</h5>
                <div class="form-group">
                    <div class="input-group mb-2">
                        <label class="input-group-text" for="youtubeLikeTime">Youtube Like</label>
                        <InputNumber id="youtubeLikeTime" class="form-control" @bind-Value="updatedTimerModel.YouTubeLikeTime" />
                    </div>

                    <div class="input-group mb-2">
                        <label class="input-group-text" for="youtubeSubTime">Youtube Subscribe</label>
                        <InputNumber id="youtubeSubTime" class="form-control" @bind-Value="updatedTimerModel.YouTubeSubTime" />
                    </div>
                </div>

                <button class="btn btn-outline-primary mt-3" action="submit" @onclick="HideOffcanvasAsync">Update Timer</button>
            </EditForm>
        </div>
    </BodyTemplate>
</Offcanvas>

@code {
    private StreamWorksUserModel loggedInUser = default!;

    //TODO
    //Set Start Time
    //Remove Time
    //Set base values for all the times
    //Save the data
    private HubConnection? twitchHub;
    private List<StreamTimerModel>? allTimerData;
    private StreamTimerModel? timerData = new();
    private CreateStreamTimerModel updatedTimerModel = new();

    // Layout Items
    private Offcanvas? timerEditOffcanvas;
    private Collapse collapseElapsedTime = default!;
    private Collapse collapseTotalTime = default!;

    private Timer? _timer;
    private TimeSpan currentTime;
    private TimeSpan oneSecond = TimeSpan.FromSeconds(1); 

    private string? lastSystemMessage;

    private int SubGiftsToAdd = 0;
    private int BitsToAdd = 0;
    private int RaidCount = 0;
    private int AddExtraTime = 0;

    private string? TimeFormat = @"dd\:hh\:mm\:ss";
    private string? TimeNumFormat = @"dd\:hh\:mm\:ss";
    private string? TimeCharFormat = @"d'd 'h'h 'm'm 's's'";
    private bool isTimeFormat = true;
    private bool isDateFormat = false;

    private bool isShowElapsed = false;
    private bool isShowTotal = false;
    private bool isShowFormat = false;
    private bool startIsDisabled = false;

    private string? CurrentTimeDisplayFormat;
    //private string? TimeWordFormat = $"{timeSpan.Days} days, {timeSpan.Hours} hours, {timeSpan.Minutes} minutes, {timeSpan.Seconds} seconds";

    protected TimeSpan TimeLeft { get; set; }
    protected TimeSpan TimeElapsed { get; set; }

    // [Parameter]
    // public EventCallback TimerEnded { get; set; }

    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        allTimerData = await timerConfig.GetTimerDataByUserId(loggedInUser.Id);

        twitchHub = new HubConnectionBuilder()
        .WithUrl(navManager.ToAbsoluteUri("/twitchhub"))
        .WithAutomaticReconnect()
        .Build();

        twitchHub.On<ChannelChatMessage>("ChatMessageReceived", (message) =>
        {
            Logger.LogInformation($"Message Received: {message.Message.Text}");
            if (message.Message.Text == "!timer 5")
            {
                AddTime(500);
            }
        });

        twitchHub.On<ChannelFollow>("GetFollows", (follow) =>
        {
            Logger.LogInformation($"Follow Received: {follow.UserName} followed {follow.BroadcasterUserName}");
            if (follow is not null)
            {
                AddTimeTwitch(timerData.TwitchFollowEvent ?? "");
            }
        });

        twitchHub.On<ChannelSubscribe>("GetSubscribedEvents", (subscription) =>
        {
            Logger.LogInformation($"Message Received: {subscription.UserName} sent a Tier {subscription.Tier.ToString()} Sub");

            if (subscription is not null && subscription.IsGift == false)
            {
                if (subscription.Tier == "1000")
                {
                    AddTimeTwitch(timerData.TwitchTier1Event ?? "");
                }
                else if (subscription.Tier == "2000")
                {
                    AddTimeTwitch(timerData.TwitchTier2Event ?? "");
                }
                else if (subscription.Tier == "3000")
                {
                    AddTimeTwitch(timerData.TwitchTier3Event ?? "");
                }
            }
        });

        twitchHub.On<ChannelSubscriptionGift>("GetSubscriptionGifts", (subGift) =>
        {
            Logger.LogInformation($"Message Received: {subGift.UserName} sent {subGift.Total} {subGift.Tier} Sub Gift(s)");
            if (subGift is not null)
            {
                if (subGift.Tier == "1000")
                {
                    AddTimeWithAmountTwitch(timerData.TwitchTier1SubGiftEvent ?? "", subGift.Total);
                }
                else if (subGift.Tier == "2000")
                {
                    AddTimeWithAmountTwitch(timerData.TwitchTier2SubGiftEvent ?? "", subGift.Total);
                }
                else if (subGift.Tier == "3000")
                {
                    AddTimeWithAmountTwitch(timerData.TwitchTier3SubGiftEvent ?? "", subGift.Total);
                }
            }
        });

        twitchHub.On<ChannelCheer>("GetCheers", (cheer) =>
        {
            Logger.LogInformation($"Message Received: {cheer.UserName} cheered {cheer.Bits} Bits");
            if (cheer is not null && cheer.Bits > 0)
            {
                AddTimeWithAmountTwitch(timerData.TwitchCheerEvent ?? "", cheer.Bits);
            }

        });

        twitchHub.On<ChannelRaid>("GetRaid", (raid) =>
        {
            Logger.LogInformation($"Message Received: {raid.FromBroadcasterUserId} raided {raid.ToBroadcasterUserName} with {raid.Viewers} viewers!");
        if (raid is not null && raid.Viewers > 0)
        {
            AddTimeWithAmountTwitch(timerData.TwitchRaidEvent ?? "", raid.Viewers);
        }

        });

        // twitchHub.On<int>("Tick", newTime =>
        // {
        //     currentTime = newTime;
        //     tickCount += 1;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<int, string>("TimerSet", (time, message) =>
        // {
        //     currentTime = time;
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<string>("TimerStarted", message =>
        // {
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        // twitchHub.On<string>("TimerStopped", message =>
        // {
        //     lastSystemMessage = message;
        //     InvokeAsync(StateHasChanged);
        // });

        await twitchHub.StartAsync();

        var groupName = loggedInUser.Id.ToString();
        await twitchHub.SendAsync("JoinGroup", groupName);
        Logger.LogInformation($"Joined Group: {groupName}");

        // Set Timer
        _timer = new Timer(1000);
        _timer.Elapsed += OnTickEvent;
        _timer.AutoReset = true;

        // Initialize Timer
        await InitializeTimer();
    }



    private async Task ShowOffcanvasAsync()
    {
        await timerEditOffcanvas?.ShowAsync();
    }
    private async Task HideOffcanvasAsync()
    {
        await timerEditOffcanvas?.HideAsync();
    }

    private async Task ToggleElapsedTimetAsync() 
    {
        if (isShowElapsed)
        {
            isShowElapsed = false;
        }
        else
        {
            isShowElapsed = true;
        }
        await collapseElapsedTime.ToggleAsync();
    }
    private async Task ToggleTotalTimeAsync()
    {
        if (isShowTotal)
        {
            isShowTotal = false;
        }
        else
        {
            isShowTotal = true;
        }
        await collapseTotalTime.ToggleAsync();
    }
    private void ToggleStartButton()
    {
        if (timerData is not null)
        {
            if (timerData.IsRunning)
            {
                startIsDisabled = true;
            }
            else
            {
                startIsDisabled = false;
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public async Task InitializeTimer()
    {
        ErrorMessage = "";

        // TODO: Select timer from a list +  Create a new timer button
        //var result = await timerConfig.GetTimerDataByUserId(loggedInUser.Id);

        // Initialize New Timer Data if no timers are found for the user
        if (allTimerData is null || allTimerData.Count() < 1)
        {
            await CreateTimer();
        }
        else
        {
            // Fill in with first timer found
            timerData = allTimerData.First();

            if (timerData is not null)
            {
                TimeLeft = timerData.CurrentTime;
                TimeElapsed = timerData.TotalTime - timerData.CurrentTime;
            }
            else
            {
                await CreateTimer();
            }
        }

        SetupTimerUpdateModel();
    }

    public TimeSpan SetTime(double secondsToRun)
    {
        return TimeSpan.FromSeconds(secondsToRun);
    }

    public async Task UpdateTime()
    {
        if (timerData is not null)
        {
            timerData.CurrentTime += SetTime(timerData.AddTime);
            timerData.TotalTime += SetTime(timerData.AddTime);
            TimeLeft = timerData.CurrentTime;
            await InvokeAsync(StateHasChanged);
            await SaveTimer();
        }
    }

    public void SetTimeFormatToClock()
    {
        isTimeFormat = true;
        isDateFormat = false;
        TimeFormat = TimeNumFormat;
        InvokeAsync(StateHasChanged);
    }

    public void SetTimeFormatToChar()
    {
        isTimeFormat = false;
        isDateFormat = true;
        TimeFormat = TimeCharFormat;
        InvokeAsync(StateHasChanged);
    }

    public async Task StartTimer()
    {
        ErrorMessage = "";

        if (timerData is not null)
        {
            if (timerData.FirstRun == true)
            {
                timerData.CurrentTime = SetTime(timerData.StartingTime);
                timerData.TotalTime = SetTime(timerData.StartingTime);

                TimeLeft = SetTime(timerData.StartingTime);
                TimeElapsed = SetTime(0);

                timerData.FirstRun = false;
                timerData.IsRunning = true;
                await SaveTimer();
            }
            else
            {
                timerData.IsRunning = true;
                await SaveTimer();
            }

            _timer.Start();
        }
        else
        {
            Logger.LogError("Timer data was null. Creating new Timer..");
            await InitializeTimer();
        }
    }

    public async Task StopTimer()
    {
        _timer.Stop();
        if (timerData is not null)
        {
            timerData.IsRunning = false;
            await SaveTimer();
        }
    }

    public void SetupTimerUpdateModel()
    {
        if (timerData is null)
        {
            ErrorMessage = "Could not load Timer settings. Timer Data is null";
            Logger.LogError("Timer Data is null");
            return;
        }
        updatedTimerModel = new();

        updatedTimerModel.StartingTime = timerData.StartingTime;
        updatedTimerModel.ShowTotalCounts = timerData.ShowTotalCounts;

        // Twitch: Set Data in Update Model
        updatedTimerModel.TwitchFollowTime = timerData.TwitchFollowTime;
        updatedTimerModel.TwitchTier1Time = timerData.TwitchTier1Time;
        updatedTimerModel.TwitchTier2Time = timerData.TwitchTier2Time;
        updatedTimerModel.TwitchTier3Time = timerData.TwitchTier3Time;

        updatedTimerModel.TwitchTier1SubGiftTime = timerData.TwitchTier1SubGiftTime;
        updatedTimerModel.TwitchTier2SubGiftTime = timerData.TwitchTier2SubGiftTime;
        updatedTimerModel.TwitchTier3SubGiftTime = timerData.TwitchTier3SubGiftTime;

        updatedTimerModel.TwitchCheerTime = timerData.TwitchCheerTime;
        updatedTimerModel.TwitchRaidTime = timerData.TwitchRaidTime;

        // Youtube
        updatedTimerModel.YouTubeLikeTime = timerData.YouTubeLikeTime;
        updatedTimerModel.YouTubeSubTime = timerData.YouTubeSubTime;
    }

    public async Task ResetTimer()
    {
        ErrorMessage = "";

        _timer.Stop();

        if (timerData is not null)
        {
            timerData.LastSetTime = timerData.CurrentTime;

            timerData.CurrentTime = SetTime(timerData.StartingTime);
            timerData.TotalTime = SetTime(timerData.StartingTime);

            TimeLeft = SetTime(timerData.StartingTime);
            TimeElapsed = SetTime(0);

            // Clear all Event Counts and rest them, to 0
            ResetEventCounts();

            timerData.IsRunning = false;
            timerData.IsCompleted = false;

            timerData.FirstRun = true;
            StateHasChanged();
            await SaveTimer();
        }
        else
        {
            await InitializeTimer();
        }
    }

    private async void OnTickEvent(object? sender, ElapsedEventArgs e)
    {
        if (timerData is not null)
        {
            TimeLeft = TimeLeft.Subtract(oneSecond);
            timerData.CurrentTime = timerData.CurrentTime.Subtract(oneSecond);
            TimeElapsed = timerData.TotalTime - timerData.CurrentTime;

            await InvokeAsync(StateHasChanged);

            if (timerData.CurrentTime.Equals(TimeSpan.Zero))
            {
                await TimerEnded();
            }
        }
        else
        {
            await InitializeTimer();
        }
    }

    private async Task TimerEnded()
    {
        _timer.Stop();

        if (timerData is not null)
        {
            timerData.IsRunning = false;
            timerData.IsCompleted = true;

            Logger.LogInformation("Timer Ended");
            await InvokeAsync(StateHasChanged);
            await SaveTimer();
        }

        Logger.LogInformation("Timer Ended");
    }

    public void Dispose()
    {
        if (_timer is not null)
        {
            _timer.Dispose();
        }
    }

    public async Task AddTimeTwitch(string twitchEvent)
    {
        if (timerData is not null)
        {
            timerData.AddTime = 0;

            if (twitchEvent == timerData.TwitchFollowEvent)
            {
                timerData.TwitchFollowEventCount++;
                timerData.AddTime = timerData.TwitchFollowTime;
            }
            else if (twitchEvent == timerData.TwitchTier1Event)
            {
                timerData.TwitchTier1EventCount++;
                timerData.AddTime = timerData.TwitchTier1Time;
            }
            else if (twitchEvent == timerData.TwitchTier2Event)
            {
                timerData.TwitchTier2EventCount++;
                timerData.AddTime = timerData.TwitchTier2Time;
            }
            else if (twitchEvent == timerData.TwitchTier3Event)
            {
                timerData.TwitchTier3EventCount++;
                timerData.AddTime = timerData.TwitchTier3Time;
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time.");
        }
    }

    public async Task AddTimeWithAmountTwitch(string twitchEvent, int amount)
    {
        if (amount < 0)
        {
            amount *= -1;
        }

        if (timerData is not null)
        {
            if (twitchEvent == timerData.TwitchTier1SubGiftEvent)
            {
                timerData.TwitchSubGiftEventCount++;
                timerData.TwitchTotalSubGiftCount += amount;
                timerData.TwitchTotalT1SubGiftCount += amount;
                timerData.AddTime = timerData.TwitchTier1SubGiftTime * amount;
            }
            else if (twitchEvent == timerData.TwitchTier2SubGiftEvent)
            {
                timerData.TwitchSubGiftEventCount++;
                timerData.TwitchTotalSubGiftCount += amount;
                timerData.TwitchTotalT2SubGiftCount += amount;
                timerData.AddTime = timerData.TwitchTier2SubGiftTime * amount;
            }
            else if (twitchEvent == timerData.TwitchTier3SubGiftEvent)
            {
                timerData.TwitchSubGiftEventCount++;
                timerData.TwitchTotalSubGiftCount += amount;
                timerData.TwitchTotalT3SubGiftCount += amount;
                timerData.AddTime = timerData.TwitchTier3SubGiftTime * amount;
            }
            else if (twitchEvent == timerData.TwitchCheerEvent)
            {
                timerData.TwitchCheerEventCount++;
                timerData.TwitchTotalCheerAmount += amount;
                timerData.AddTime = timerData.TwitchCheerTime * amount;
            }
            else if (twitchEvent == timerData.TwitchRaidEvent)
            {
                timerData.TwitchRaidEventCount++;
                timerData.TwitchTotalRaidAmount += amount;
                timerData.AddTime = timerData.TwitchRaidTime * amount;
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task AddTime(int time)
    {
        if (time < 0)
        {
            time *= -1;
        }
        if (timerData is not null)
        {
            timerData.AddTime = time;
            timerData.CurrentTime += SetTime(timerData.AddTime);
            timerData.TotalTime += SetTime(timerData.AddTime);
            TimeLeft = timerData.CurrentTime;
            await InvokeAsync(StateHasChanged);
            await SaveTimer();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time from Chat");
        }
    }

    public async Task RemoveTimeTwitch(string twitchEvent)
    {
        if (timerData is not null)
        {
            if (twitchEvent == timerData.TwitchFollowEvent)
            {
                timerData.TwitchFollowEventCount--;
                timerData.AddTime = timerData.TwitchFollowTime * -1;
            }
            else if (twitchEvent == timerData.TwitchTier1Event)
            {
                timerData.TwitchTier1EventCount--;
                timerData.AddTime = timerData.TwitchTier1Time * -1;
            }
            else if (twitchEvent == timerData.TwitchTier2Event)
            {
                timerData.TwitchTier2EventCount--;
                timerData.AddTime = timerData.TwitchTier2Time * -1;
            }
            else if (twitchEvent == timerData.TwitchTier3Event)
            {
                timerData.TwitchTier3EventCount--;
                timerData.AddTime = timerData.TwitchTier3Time * -1;
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task RemoveTimeWithAmountTwitch(string twitchEvent, int amount)
    {
        if (amount < 0)
        {
            amount *= -1;
        }

        if (timerData is not null)
        {
            if (twitchEvent == timerData.TwitchTier1SubGiftEvent)
            {
                timerData.TwitchSubGiftEventCount--;
                timerData.TwitchTotalSubGiftCount -= amount;

                timerData.TwitchTotalT1SubGiftCount -= amount;
                timerData.AddTime = timerData.TwitchTier1SubGiftTime * -(amount);
            }
            else if (twitchEvent == timerData.TwitchTier2SubGiftEvent)
            {
                timerData.TwitchSubGiftEventCount--;
                timerData.TwitchTotalSubGiftCount -= amount;

                timerData.TwitchTotalT2SubGiftCount -= amount;
                timerData.AddTime = timerData.TwitchTier2SubGiftTime * -(amount);
            }
            else if (twitchEvent == timerData.TwitchTier3SubGiftEvent)
            {
                timerData.TwitchSubGiftEventCount--;
                timerData.TwitchTotalSubGiftCount -= amount;

                timerData.TwitchTotalT3SubGiftCount -= amount;
                timerData.AddTime = timerData.TwitchTier3SubGiftTime * -(amount);
            }
            else if (twitchEvent == timerData.TwitchCheerEvent)
            {
                timerData.TwitchCheerEventCount--;
                timerData.TwitchTotalCheerAmount -= amount;
                timerData.AddTime = timerData.TwitchCheerTime * -(amount);
            }
            else if (twitchEvent == timerData.TwitchRaidEvent)
            {
                timerData.TwitchRaidEventCount--;
                timerData.TwitchTotalRaidAmount -= amount;
                timerData.AddTime = timerData.TwitchCheerTime * -(amount);
            }
            else
            {
                Logger.LogError("Could not find Twitch Event");
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task AddTimeYoutube(string youtubeEvent)
    {
        if (timerData is not null)
        {
            switch (youtubeEvent)
            {
                case "YoutubeLike":
                    timerData.YoutubeLikeEventCount++;
                    timerData.AddTime = timerData.YouTubeLikeTime;
                    break;

                case "YoutubeSubscribe":
                    timerData.YoutubeSubEventCount++;
                    timerData.AddTime = timerData.YouTubeSubTime;
                    break;

                default:
                    timerData.AddTime = timerData.DefaultTime;
                    break;
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task RemoveTimeYoutube(string youtubeEvent)
    {
        if (timerData is not null)
        {
            switch (youtubeEvent)
            {
                case "YoutubeLike":
                    timerData.YoutubeLikeEventCount--;
                    timerData.AddTime = -(timerData.YouTubeLikeTime);
                    break;

                case "YoutubeSubscribe":
                    timerData.YoutubeSubEventCount--;
                    timerData.AddTime = -(timerData.YouTubeSubTime);
                    break;

                default:
                    timerData.AddTime = -(timerData.DefaultTime);
                    break;
            }

            await UpdateTime();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time with amount.");
        }
    }

    public async Task RemoveTime(int time)
    {
        if (time < 0)
        {
            time *= -1;
        }
        if (timerData is not null)
        {
            timerData.AddTime = time;
            timerData.CurrentTime -= SetTime(timerData.AddTime);
            timerData.TotalTime -= SetTime(timerData.AddTime);
            TimeLeft = timerData.CurrentTime;
            await InvokeAsync(StateHasChanged);
            await SaveTimer();
        }
        else
        {
            Logger.LogError("Timer Data is null. Couldn't add time from Chat");
        }
    }

    public void ResetEventCounts()
    {
        if (timerData is not null)
        {
            timerData.TwitchFollowEventCount = 0;

            timerData.TwitchTier1EventCount = 0;
            timerData.TwitchTier2EventCount = 0;
            timerData.TwitchTier3EventCount = 0;

            timerData.TwitchSubGiftEventCount = 0;
            timerData.TwitchTotalSubGiftCount = 0;
            timerData.TwitchTotalT1SubGiftCount = 0;
            timerData.TwitchTotalT2SubGiftCount = 0;
            timerData.TwitchTotalT3SubGiftCount = 0;

            timerData.TwitchCheerEventCount = 0;
            timerData.TwitchTotalCheerAmount = 0;

            timerData.TwitchRaidEventCount = 0;
            timerData.TwitchTotalRaidAmount = 0;

            timerData.YoutubeLikeEventCount = 0;
            timerData.YoutubeSubEventCount = 0;
        }
    }

    public async Task SetHubTimer()
    {
        // currentTime = startTime;
        // streamTimer.SetTimer(1000);
        // streamTimer.OnTick += TickHandler;
        if (twitchHub is not null)
        {
            await twitchHub.SendAsync("SetTimer");
        }
    }

    public async Task StartHubTimer()
    {
        //streamTimer.StartTimer();
        if (twitchHub is not null)
        {
            await twitchHub.SendAsync("StartTimer");
        }
    }

    private void TickHandler()
    {
        timerData.TickCount += 1;
        InvokeAsync(StateHasChanged);
    }

    private async Task CreateTimer()
    {
        timerData = new();
        timerData.UserId = loggedInUser.Id;
        timerData.CurrentTime = SetTime(0);
        timerData.TimerTitle = "Default Title";

        try
        {
            await timerConfig.CreateTimerData(timerData);
            Logger.LogError("New Time created.");
        }
        catch
        {
            ErrorMessage = "Could not create Timer. Timer Data is null";
            Logger.LogError("Timer Data is null");
        }
    }

    private async Task UpdateTimer()
    {
        if (timerData is null)
        {
            ErrorMessage = "Could not update Timer. Timer Data is null";
            Logger.LogError("Timer Data is null");
            return;
        }
        timerData.StartingTime = updatedTimerModel.StartingTime;
        timerData.ShowTotalCounts = updatedTimerModel.ShowTotalCounts;

        // Twitch
        timerData.TwitchFollowTime = updatedTimerModel.TwitchFollowTime;
        timerData.TwitchTier1Time = updatedTimerModel.TwitchTier1Time;
        timerData.TwitchTier2Time = updatedTimerModel.TwitchTier2Time;
        timerData.TwitchTier3Time = updatedTimerModel.TwitchTier3Time;

        timerData.TwitchTier1SubGiftTime = updatedTimerModel.TwitchTier1SubGiftTime;
        timerData.TwitchTier2SubGiftTime = updatedTimerModel.TwitchTier2SubGiftTime;
        timerData.TwitchTier3SubGiftTime = updatedTimerModel.TwitchTier3SubGiftTime;

        timerData.TwitchCheerTime = updatedTimerModel.TwitchCheerTime;
        timerData.TwitchRaidTime = updatedTimerModel.TwitchRaidTime;

        // Youtube
        timerData.YouTubeLikeTime = updatedTimerModel.YouTubeLikeTime;
        timerData.YouTubeSubTime = updatedTimerModel.YouTubeSubTime;

        await SaveTimer();

        SetupTimerUpdateModel();
    }

    private async Task SaveTimer()
    {
        if (timerData is not null)
        {
            await timerConfig.UpdateTimerData(timerData);
        }
    }
}